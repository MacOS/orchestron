
import xml
import yang.gdata
import orchestron.trans as otrans

import testing

def transpose(cfg_per_src: dict[str, yang.gdata.Node]) -> dict[str, dict[str, yang.gdata.Node]]:
    cfg_per_key = {}
    for src, conf in cfg_per_src.items():
        if isinstance(conf, yang.gdata.List):
            for le in conf.elements:
                key = le.key_str()
                if key in cfg_per_key:
                    cfg_per_key[key][src] = le
                else:
                    cfg_per_key[key] = {src: le}
        elif isinstance(conf, yang.gdata.Inner):
            for key, subconf in conf.children.items():
                if key in cfg_per_key:
                    cfg_per_key[key][src] = subconf
                else:
                    cfg_per_key[key] = {src: subconf}
        else:
            raise NotImplementedError("Unhandled configuration type" + str(type(conf)))

    return cfg_per_key

#def _test_transpose():
#    cfg1 = cfs_root.from_xml(xml.decode(nb_input))
#    cfg2 = cfs_root.from_xml(xml.decode(nb_input2))
#    cfg_per_src = {"source1": cfg1.to_gdata(), "source2": cfg2.to_gdata()}
#    cfg_per_key = transpose(cfg_per_src)
#    print(cfg_per_key)
#    #testing.assertEqual(cfg_per_key["routers"]["STO-CORE-1"].id, 4)
#    #testing.assertEqual(cfg_per_key["routers"]["AMS-CORE-1"].id, 8)
#    #testing.assertEqual(cfg_per_key["routers"]["NYC-CORE-1"].id, 1)


# TTT - Transactional Transform Trees

class TTTNode(object):
    proc def configure(self, diff: dict[str, yang.gdata.Node], output_tree: dict[str, yang.gdata.Node]):
        raise NotImplementedError("TTTNode.configure not implemented")

class TTTContainer(TTTNode):
    elems: dict[str, TTTNode]

    def __init__(self, elems: dict[str, TTTNode]):
        self.elems = elems

    proc def configure(self, diff: dict[str, yang.gdata.Node], output_tree: dict[str, yang.gdata.Node]):
        for path, subdiff in transpose(diff).items():
            if path in self.elems:
                elem = self.elems[path]
                elem.configure(subdiff, output_tree)

actor TTTListState(template: () -> TTTNode):
    var elems = {}

    def get_elems(keys: list[str]=[]) -> dict[str, TTTNode]:
        res = {}
        for key in keys:
            res[key] = get_elem(key)
        return res

    def get_elem(key: str) -> TTTNode:
        if key in elems:
            return elems[key]
        else:
            elem = template()
            elems[key] = elem
            return elem

class TTTList(TTTNode):
    """We only support unordered lists
    """
    state: TTTListState

    def __init__(self, template):
        self.state = TTTListState(template)

    proc def configure(self, diff: dict[str, yang.gdata.Node], output_tree: dict[str, yang.gdata.Node]):
        transp = transpose(diff)
        elems: dict[str, TTTNode] = self.state.get_elems(list(transp.keys()))
        for key, subdiff in transp.items():
            elems[key].configure(subdiff, output_tree)

#actor TTTTransformState(transform):
#    pass

class TTTTransform(TTTNode):
    def __init__(self):
        #self.state = TTTTransformState(self)
        pass

    mut def transform_wrapper(self, i: yang.gdata.Node) -> yang.gdata.Node:
        raise NotImplementedError("TTTTransform.transform not implemented")

    proc def configure(self, diff: dict[str, yang.gdata.Node], output_tree: dict[str, yang.gdata.Node]):
        print("TTTTransform.configure", self)
#        for d in diff.values():
#            merged_config
        diffs = list(diff.values())
        merged_config = diffs[0]
        for d in diffs[1:]:
            merged_config = yang.gdata.merge(merged_config, d)
        output = self.transform_wrapper(merged_config)
        output_tree[str(self)] = output
        print("TTTTransform.configure output:\n", output.to_xmlstr())
