import testing
import logging

import orchestron.ttx as ttx
#import orchestron.gdata as gdata
import yang.gdata as gdata


tree1 = gdata.List(["name"], [
    gdata.ListElement(["k1"], {
        "n1": gdata.Leaf("int", 1),
        "n2": gdata.Leaf("int", 2)
    }),
    gdata.ListElement(["k4"], {
        "n4": gdata.Leaf("int", 4)
    })
])

tree1diff = gdata.List(["name"], [
    gdata.AbsentListElement(["k1"]),
    gdata.ListElement(["k4"], {
        "n4": gdata.Leaf("int", 0)
    })
])

tree1pruned = gdata.List(["name"], [
    gdata.ListElement(["k4"], {
        "n4": gdata.Leaf("int", 0)
    })
])

tree2 = gdata.List(["name"], [
    gdata.ListElement(["k1"], {
        "n2": gdata.Leaf("int", 2)
    }),
    gdata.ListElement(["k2"], {
        "n1": gdata.Leaf("int", 1),
        "n3": gdata.Leaf("int", 3)
    })
])

merge_1_2 = gdata.List(["name"], [
    gdata.ListElement(["k1"], {
        "n1": gdata.Leaf("int", 1),
        "n2": gdata.Leaf("int", 2)
    }),
    gdata.ListElement(["k2"], {
        "n1": gdata.Leaf("int", 1),
        "n3": gdata.Leaf("int", 3)
    }),
    gdata.ListElement(["k4"], {
        "n4": gdata.Leaf("int", 4)
    })
])

class PassThrough(ttx.TransformFunction):
    pass


########################

actor basic_commit_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    router = ttx.TransformTemplate(PassThrough)
    tlist = ttx.List(router)
    t1 = tlist.newtrans()

    t1.configure("1", {'srcA': tree1}, out)

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, tree1)
        done(True, None)

    t1.lock("1", out, cont1)

def _test_basic_commit(done, logger: logging.Handler):
    c = basic_commit_tester(done)

########################

actor basic_delete_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    router = ttx.TransformTemplate(PassThrough)
    tlist = ttx.List(router)
    t1 = tlist.newtrans()

    def cont2(_r: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r.prsrc(), tree1pruned.prsrc())
        done(True, None)

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r.prsrc(), tree1.prsrc())
        t1.configure("1", {'srcA': tree1diff}, out)
        t1.lock("1", out, cont2)

    t1.configure("1", {'srcA': tree1}, out)
    t1.lock("1", out, cont1)

def _test_basic_delete(done, logger: logging.Handler):
    c = basic_delete_tester(done)

########################

list1a = gdata.List(["name"], [
    gdata.ListElement(["key1"], {
        "a": gdata.Leaf("int", 0)
    })
])

list1b = gdata.List(["name"], [
    gdata.ListElement(["key1"], {
        "b": gdata.Leaf("int", 1)
    })
])

list1 = gdata.List(["name"], [
    gdata.ListElement(["key1"], {
        "a": gdata.Leaf("int", 0),
        "b": gdata.Leaf("int", 1)
    })
])

actor simultaneous_create_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    router = ttx.TransformTemplate(PassThrough)
    tlist = ttx.List(router)
    t1 = tlist.newtrans()
    t2 = tlist.newtrans()

    def cont1(_r: value):
        t2.lock("2", out, cont2)
        t1.commit("1", True)

    def cont2(_r: value):
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, list1)
        done(True, None)

    t1.configure("1", {'srcA': list1a}, out)
    t2.configure("2", {'srcB': list1b}, out)
    t1.lock("1", out, cont1)

def _test_simultaneous_create(done, logger: logging.Handler):
    c = simultaneous_create_tester(done)

########################

actor aborted_create_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    router = ttx.TransformTemplate(PassThrough)
    tlist = ttx.List(router)
    t1 = tlist.newtrans()

    def cont1(_r: value):
        t1.commit("1", False)
        r = t1.get()
        testing.assertEqual(r, gdata.List(["name"], []))
        done(True, None)

    t1.configure("1", {'srcA': list1a}, out)
    t1.lock("1", out, cont1)

def _test_aborted_create(done, logger: logging.Handler):
    c = aborted_create_tester(done)

########################

y1 = gdata.List(["name"], [
    gdata.ListElement(["key0"], {
        "a": gdata.Leaf("int", 0)
    }),
    gdata.ListElement(["key1"], {
        "a": gdata.Leaf("int", 1)
    })
])

y2 = gdata.List(["name"], [
    gdata.ListElement(["key1"], {
        "b": gdata.Leaf("int", 1)
    }),
    gdata.ListElement(["key2"], {
        "a": gdata.Leaf("int", 1)
    })
])

y2b = gdata.List(["name"], [
    gdata.ListElement(["key1"], {
        "b": gdata.Leaf("int", 1)
    })
])

actor aborted_create_tester2(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    router = ttx.TransformTemplate(PassThrough)
    tlist = ttx.List(router)
    t1 = tlist.newtrans()
    t2 = tlist.newtrans()

    def cont1(_r: value):
        t2.lock("2", out, cont2)
        t1.commit("1", False)

    def cont2(_r: value):
        t2.configure("2", {'srcB': y2b}, out)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r.prsrc(), y2b.prsrc())
        done(True, None)

    t1.configure("1", {'srcA': y1}, out)
    t2.configure("2", {'srcB': y2}, out)
    t1.lock("1", out, cont1)

def _test_aborted_create2(done, logger: logging.Handler):
    c = aborted_create_tester2(done)

########################

actor main(env):
    aborted_create_tester2(lambda s,e: env.exit(0))
