import logging
import testing

import yang.adata
import yang.gdata

from orchestron.device_meta_config import orchestron_rfs__device_entry as DeviceMetaConfig

import netconf

class UnsupportedDevice(Exception):
    pass

class EmptyConfig(yang.adata.MNode):
    def to_gdata(self) -> yang.gdata.Node:
        return yang.gdata.Root()


actor DeviceManager(wcap: ?WorldCap=None, log_handler: logging.Handler):
    var devices = {}
    var reconf_cb: ?action() -> None = None

    def get(name: str) -> Device:
        if name not in devices:
            devices[name] = Device(wcap, name, log_handler, reconf_cb)
        dev = devices[name]
        return dev

    def on_reconf(on_reconf: action() -> None):
        reconf_cb = on_reconf

class ModCap(object):
    name: str
    namespace: str
    revision: ?str
    feature: list[str]

    def __init__(self, name: str, namespace: str, revision: ?str=None, feature: list[str]=[]):
        self.name = name
        self.namespace = namespace
        self.revision = revision
        self.feature = feature

extension ModCap(Eq):
    def __eq__(self, other: ModCap) -> bool:
        self_revision = self.revision
        other_revision = other.revision
        revision_eq = (self_revision == None and other_revision == None) or (self_revision != None and other_revision != None and self_revision == other_revision)
        return self.name == other.name and self.namespace == other.namespace and revision_eq and self.feature == other.feature

def modcap_eq(a: dict[str, ModCap], b: dict[str, ModCap]) -> bool:
    if len(a) != len(b):
        return False
    if set(a.keys()) != set(b.keys()):
        return False
    for k in a.keys():
        if a[k] != b[k]:
            return False
    return True


def parse_cap(tcap: str) -> ModCap:
    parts = tcap.split("?", 1)

    name = parts[0]
    namespace = parts[0]
    revision = None
    feature = []

    qps = {}
    if len(parts) > 1:
        qparts = parts[1].split("&")
        for qpart in qparts:
            qkvparts = qpart.split("=")
            if len(qkvparts) == 2:
                qk, qv = qkvparts[0], qkvparts[1]
                qps[qk] = qv

    if "module" in qps:
        name = qps["module"]
    if "revision" in qps:
        revision = qps["revision"]

    return ModCap(name, namespace, revision, feature)


def _test_parse_cap_base():
    mod = parse_cap("urn:ietf:params:netconf:base:1.1")
    testing.assertEqual(mod.name, "urn:ietf:params:netconf:base:1.1")
    testing.assertEqual(mod.namespace, "urn:ietf:params:netconf:base:1.1")
    testing.assertEqual(mod.revision, None)
    testing.assertEqual(mod.feature, [])

def _test_parse_cap_xr_isis():
    mod = parse_cap("http://cisco.com/ns/yang/Cisco-IOS-XR-isis-act?module=Cisco-IOS-XR-isis-act&revision=2019-10-01")
    testing.assertEqual(mod.name, "Cisco-IOS-XR-isis-act")
    testing.assertEqual(mod.namespace, "http://cisco.com/ns/yang/Cisco-IOS-XR-isis-act")
    testing.assertEqual(mod.revision, "2019-10-01")
    testing.assertEqual(mod.feature, [])

def _test_parse_cap_xr_hostname():
    mod = parse_cap("http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg?module=Cisco-IOS-XR-um-hostname-cfg&revision=2021-04-21")
    testing.assertEqual(mod.name, "Cisco-IOS-XR-um-hostname-cfg")
    testing.assertEqual(mod.namespace, "http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg")
    testing.assertEqual(mod.revision, "2021-04-21")
    testing.assertEqual(mod.feature, [])



# State machine
# connect
actor Device(wcap: ?WorldCap=None, name: str, log_handler: logging.Handler, on_reconf: ?action() -> None=None):
    """NETCONF Device

    Some day this will be the base class for all devices and we'll support all
    kinds of device types and protocols but for now we are just doing NETCONF.
    """
    var dmc: ?DeviceMetaConfig = None
    var client: ?netconf.Client = None
    var conf: ?yang.gdata.Node = None
    var state = 0
    var modset: dict[str, ModCap] = {}
    var subs = []

    _log = logging.Logger(log_handler)
    _log.name = "Device " + name

    if wcap == None:
        # TODO: remove this and inject mock support modules elsewhere
        mxr1 = parse_cap("http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg?module=Cisco-IOS-XR-um-hostname-cfg&revision=2021-04-21")
        modset[mxr1.name] = mxr1
        mxr2 = parse_cap("http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg?module=Cisco-IOS-XR-um-interface-cfg&revision=2022-07-11")
        modset[mxr2.name] = mxr2
        mxr3 = parse_cap("http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ipv4-cfg?module=Cisco-IOS-XR-um-if-ipv4-cfg&revision=2022-07-11")
        modset[mxr3.name] = mxr3

    def _on_connect(c):
        _log.info("Connected to device")
        state = 1

        # TODO: actonc bug - try uncommenting this
        # for cap in c.get_capabilities():
        caps = c.get_capabilities()
        new_modset: dict[str, ModCap] = {}
        for cap in caps:
            m = parse_cap(cap)
            new_modset[m.name] = m

        if not modcap_eq(modset, new_modset):
            modset = new_modset
            if on_reconf != None:
                on_reconf()

        if conf != None:
            print("Sending config")
            edit_config(conf)
        else:
            print("No config to send")

    def _on_error(c, error):
        modset = {}
        print("Error connecting to device")

    def _on_notif(c, n):
        print("Notification from device")

    def set_meta_config(conf: DeviceMetaConfig):
        print("Device.set_meta_config")

        if wcap == None:
            print("Device in MOCK mode, pretending to connect to device...")
            state = 1
            for mock_cap in conf.mock.modules.elements:
                m = ModCap(mock_cap.name, mock_cap.namespace, mock_cap.revision, mock_cap.feature)
                modset[m.name] = m
            return

        if state == 1:
            print("Device already connected, ignoring new config")
            return

#        if dmc is not None:
#            # TODO: should compare existing dmc with new conf
#            if dmc.to_gdata() == conf.to_gdata():
#                print("Device Meta Config already set to same value")
#                return

        #print(conf.to_gdata().to_xmlstr())

        if not len(conf.address.elements) > 0:
            print("Not enough addressess :/")
            return

        addr = conf.address.elements[0]
        address = addr.address
        addr_port = addr.port
        port = int(addr_port) if addr_port != None else 830
        username = conf.credentials.username
        password = conf.credentials.password

        if wcap != None and username != None and password != None:
            print("Setting up NETCONF client...", address, port, username, password)
            c = netconf.Client(wcap, address, port, username, password,
                               on_connect=_on_connect,
                               on_error=_on_error,
                               on_notif=_on_notif,
                               log_handler=log_handler)
            client = c
        dmc = conf

    def get_capabilities():
        if client != None:
            return client.get_capabilities()
        return []

    def get_modules():
        return modset

    def _is_writable_running():
        return ":writable-running" in modset

    def edit_config(new_conf: yang.gdata.Node):
        print("Device.edit_config")
        conf = new_conf
        if state != 1:
            print("Device.edit_config not connected yet, storing config")
            return
        if wcap == None:
            print("Device in MOCK mode, \"sending config\"... *hihi*")
            return
        if client is not None:
            print("Device.edit_config Sending config...")
            if _is_writable_running():
                client.edit_config(new_conf.to_xmlstr(pretty=False), _on_conf)
            else:
                client.edit_config(new_conf.to_xmlstr(pretty=False), _on_conf, datastore="candidate")

    def _on_conf(c, r):
        if r is not None:
            print("Device._on_conf", r.encode())
            c.commit(_on_commit)
        else:
            print("Device._on_conf went to shit")

    def _on_commit(c, r):
        if r is not None:
            print("Device._on_commit", r.encode())
        else:
            print("Device._on_commit went to shit")
