import diff
import json
import logging
import testing
import xml

import yang
import yang.schema
import yang.adata
import yang.gdata

from orchestron.device_meta_config import orchestron_rfs__device_entry as DeviceMetaConfig

import netconf

NO_TRANSACTION = 0
IN_TRANSACTION = 1

NOT_CONNECTED = 0
CONNECTING    = 1
CONNECTED     = 2

class DeviceSchema(object):
    name: str

    ## Schema namespaces
    schema_namespaces: set[str]

    ## Root of the config data tree
    # TODO: why is @property needed here?
    @property
    root: mut() -> yang.adata.MNode

    ## Workaround for "device_type.root.from_gdata" not working, I suspect
    ## because root.from_gdata is a static method .. This now points to the
    ## from_gdata static method on an aliased import of the root type, like this:
    # from foo.devices.bar_device_adata import root as bar_device_adata_root
    # ... = DeviceType(..., from_gdata=bar_device_adata_root.from_gdata, ...)
    # TODO: why is @property needed here?
    @property
    from_gdata: mut(?yang.gdata.Node) -> yang.adata.MNode

    ## Function to convert from XML to gdata using the DeviceType schema
    # TODO: why is @property needed here?
    @property
    from_xml: mut(xml.Node) -> yang.gdata.Container

    ## Function to convert from JSON to gdata using the DeviceType schema
    # TODO: why is @property needed here?
    @property
    from_json: mut(dict[str, ?value]) -> yang.gdata.Container

    def __init__(self, name, schema_namespaces, root, from_gdata, from_xml=None, from_json=None):
        self.name = name
        self.schema_namespaces = schema_namespaces
        self.root = root
        self.from_gdata = from_gdata
        self.from_xml = from_xml if from_xml is not None else lambda x: yang.gdata.Container()
        self.from_json = from_json if from_json is not None else lambda x: yang.gdata.Container()


## DeviceType represents a type of device, i.e. a specific platform or
## implementation of a device. It is used to define the schema and
## adapter type for the device.
class DeviceType(object):
    ## Name of the device type
    name: str

    ## Adapter type, i.e. the DeviceAdapter subclass to use
    # TODO: why is @property needed here?
    @property
    adapter_type: proc(DeviceMgr, DeviceSchema, logging.Handler, ?WorldCap) -> DeviceAdapter

    schema: DeviceSchema

    def __init__(self, name: str, adapter_type, schema_namespaces, root, from_gdata, from_xml=None, from_json=None):
        self.name = name
        self.adapter_type = adapter_type
        self.schema = DeviceSchema(name, schema_namespaces, root, from_gdata, from_xml, from_json)

class MockRoot(yang.adata.MNode):
    """Mock root node for mock devices"""
    def __init__(self):
        self._name = "dummy"
        self._ns = "dummy_ns"
        self._schema = None
        self._parent = None

    mut def to_gdata(self) -> yang.gdata.Node:
        return yang.gdata.Leaf("string", self._name)

    @staticmethod
    mut def from_gdata(self, gdata: ?yang.gdata.Node=None) -> yang.adata.MNode:
        return MockRoot()

    mut def prsrc(self, self_name='ad', top=False, list_element=False) -> str:
        return f"{self_name}.{self._name}"

class DeviceError(Exception):
    """Exception raised when the device configuration fails
    """

class NotConnectedError(DeviceError):
    """The device is not connected
    """

class ConfigError(DeviceError):
    """Configuration error, i.e. the device rejected the configuration

    Retrying the same configuration typically does not help.
    """

class ModCap(object):
    name: str
    namespace: str
    revision: ?str
    feature: list[str]

    def __init__(self, name: str, namespace: str, revision: ?str=None, feature: list[str]=[]):
        self.name = name
        self.namespace = namespace
        self.revision = revision
        self.feature = feature

    def __str__(self) -> str:
        return f"ModCap(name={self.name}, namespace={self.namespace}, revision={self.revision}, feature={self.feature})"

extension ModCap(Eq):
    def __eq__(self, other: ModCap) -> bool:
        self_revision = self.revision
        other_revision = other.revision
        revision_eq = (self_revision is None and other_revision is None) or (self_revision is not None and other_revision is not None and self_revision == other_revision)
        return self.name == other.name and self.namespace == other.namespace and revision_eq and self.feature == other.feature


actor DeviceRegistry(dev_types: dict[str, DeviceType]={}, wcap: ?WorldCap=None, log_handler: logging.Handler):
    """Device Registry keeps track of all devices and hands out references to
    them based on name.

    There must only be a single Device instance per device, i.e. the same device
    name must always return the same Device instance.
    """
    var devices = {}

    action def _dummy_reconf(name: str):
        # Dummy reconf callback, used to avoid None
        pass

    var reconf_cb: action(str) -> None = _dummy_reconf

    def get(name: str) -> DeviceMgr:
        if name not in devices:
            devices[name] = DeviceMgr(dev_types, wcap, name, log_handler, reconf_cb)
        dev = devices[name]
        return dev

    def on_reconf(on_reconf: action(str) -> None):
        reconf_cb = on_reconf

def truncate_conf(conf: ?yang.gdata.Node) -> str:
    """Truncate the configuration to a short string for logging
    """
    if conf is not None:
        sc = conf.to_json()
        trunc_len = min([len(sc), 50])
        if trunc_len < len(sc):
            sc = sc[:trunc_len] + "..."
        return sc
    return r"{}"

actor DeviceMgr(dev_types: dict[str, DeviceType]={}, wcap: ?WorldCap=None, name: str, log_handler: logging.Handler, on_reconf: action(str) -> None):
    """Device Manager manages a device and represents that device, as an
    abstract device, in the system. Platform specific handling is implemented in
    the DeviceAdapter, i.e.  in subclasses of DeviceAdapter, like NetconfDriver
    and MockAdapter.

    The DeviceMgr sits between the TTT transaction engine and devices out in
    the real world. All changes from TTT are accepted, they are by definition
    the intended target configuration for the device, thus the TTT API is fairly
    simple. Configuration is fed from TTT to DeviceMgr asynchronously (nothing
    can go wrong) together with a transaction id (tid). If a TTT transaction
    wants to await the configuration to reach the device, that is possible via
    the wait_complete(tid). The device configuration interaction is serial,
    which means that we are either idling or have configuration in-transit to
    the device. If new configuration is received from TTT while we have
    configuration in-transit to the device, the new configuration is queued up
    and the associated transactions added to pending_txids. Once acknowledgement
    is received from the device, and thus the in-transit commit has concluded,
    the pending transactions, represented by target_conf, can be pushed to the
    device.

    The device interaction is entirely asynchronous.
    """
    _log_handler = logging.Handler(name)
    _log_handler.set_handler(log_handler)
    _log_handler.set_output_level(logging.DEBUG)
    _log = logging.Logger(_log_handler)

    mock = True if wcap is None else False
    _log.debug("DeviceMgr starting up", {"name": name, "mock": mock})

    # Orchestron's intended target configuration, that we want on the device.
    var target_conf: ?yang.gdata.Node = None

    # TODO: remove this - we don't need to store it, the adapter will store it
    # The currently running configuration on the device (which in NMDA lingo is
    # the "intended configuration" of the device)
    var running_conf: ?yang.gdata.Node = None

    # The device's meta configuration, like address, credentials, etc.
    var dmc: ?DeviceMetaConfig = None

    #var adapter: DeviceAdapter = NoAdapter(self, _log_handler, wcap)
    # TODO: default to NoAdapter!?

    var schema: DeviceSchema = DeviceSchema("mock", set(), MockRoot, from_gdata=MockRoot.from_gdata)
    var adapter: DeviceAdapter = MockAdapter(self, schema, _log_handler, wcap) if mock else NetconfAdapter(self, schema, _log_handler, wcap)

    # The modules supported by the device.
    var modset: dict[str, ModCap] = {}
    var modset_id: ?str = None

    # current_txids are the ids of the transactions that are currently
    # in-transit, which also means that we can determine if we have an
    # outstanding transaction by checking len(current_txids) > 0.
    var current_txids = set()
    # pending_txids are the ids of the transactions that are pending, which
    # means these transactions arrived while we already had configuration
    # in-transit to the device. When len(pending_txids) > 0, we need to
    # send the latest configuration after the current transaction is done.
    var pending_txids = set()
    # Note how target_conf always only reflects the very latest configuration
    # that we received from the TTT transaction engine. When the device is ready
    # to receive configuration (we are connected, have said hello, gotten
    # capabilities, do not have an outstanding transaction), we will send the
    # target_conf. A snapshot is taken and sent to the device. We do not keep
    # that particular version. If later the device failed to commit the
    # configuration and we need to retry, we will retry with a new
    # configuration.

    # TTT transactions can optionally request, through wait_complete(tid, cb), to
    # wait until configuration has been committed to the device. We keep track
    # of those callbacks keyed by tid.
    var callbacks: dict[str, action(value)->None] = {}

    def on_modset_update(new_modset: dict[str, ModCap]):
        _log.debug("Modset updated", {"new_modset": new_modset})
        on_reconf(name)

    def on_connect(new_modset: dict[str, ModCap]):
        _log.debug("Device connected", {"new_modset": new_modset})
        adapter.get_config(_get_config_done)
        if modset_eq(modset, new_modset):
            _log.debug("Supported modules unchanged")
            if modset != {}:
                _log.debug("Sending config")
                _send_config()
        else:
            _log.debug("New supported modules, triggering RFS reconf", {"name": name})
            modset = new_modset
            modset_id = hash_modset(modset)
            on_reconf(name)
            return

    def set_dmc(new_dmc: DeviceMetaConfig) -> None:
        old_type = str(dmc.type) if dmc is not None else str(None)
        _log.debug("DeviceMgr.set_dmc", {"old_type": old_type, "new_dmc": json.encode(json.decode(new_dmc.to_gdata().to_json()), pretty=False)})

        if mock:
            _log.debug("DeviceMgr.set_dmc: mock device")
        else:
            new_dmc_type = new_dmc.type
            if new_dmc_type is not None:
                if old_type != str(new_dmc.type):
                    _log.debug("DeviceMgr type has changed, using new adapter", {"old_type": old_type, "new_type": new_dmc.type})

                    device_type = dev_types.get(new_dmc_type)
                    if device_type is not None:
                        adapter = device_type.adapter_type(self, device_type.schema, _log_handler, wcap)
                        _log.info("DeviceMgr.set_dmc: using adapter", {"adapter": adapter})
                        adapter.set_dmc(new_dmc)
                    else:
                        _log.warning("DeviceMgr.set_dmc: configured device type not available in system", {"device_type": new_dmc_type})
                else:
                    _log.debug("DeviceMgr.set_dmc: device type unchanged, not changing adapter")
            else:
                _log.debug("DeviceMgr.set_dmc: no device type configured, not changing adapter")

        adapter.set_dmc(new_dmc)
        adapter.get_config(_get_config_done)

        dmc = new_dmc

    def _transaction_done(error: ?Exception):
        """Internal function called when transaction is done
        """
        if error is not None:
            if isinstance(error, NotConnectedError):
                _log.debug("DeviceMgr._transaction_done: Device not connected, backing off, waiting for reconnect")
                pending_txids.update(current_txids)
                current_txids = set()
            else:
                if isinstance(error, ConfigError):
                    _log.debug("DeviceMgr._transaction_done: Configuration failed, bad config", {"error": error})
                else:
                    _log.debug("DeviceMgr._transaction_done: Unhandled error", {"error": error})

                # TODO: should we signal failure to uptream transactions? or just retry in some way?
                for tid,callback in callbacks.items():
                    if tid in current_txids:
                        callback(error)
                        del callbacks[tid]

                pending_txids.update(current_txids)
                current_txids = set()
                if len(pending_txids) > 0:
                    _log.debug("New intended configuration available, retrying with latest config")
                    adapter.get_config(_get_config_done)
                    _send_config()
                else:
                    _log.debug("No new intended configuration available, no point in retrying with same conf")
        else:
            _log.debug("Configuration successfully applied on device, calling callbacks...", {"txids": current_txids})
            adapter.get_config(_get_config_done)
            for tid,callback in callbacks.items():
                if tid in current_txids:
                    callback(True)
                    del callbacks[tid]
            current_txids = set()
            if len(pending_txids) > 0:
                _log.debug("Configuration changed during in-progress transaction, running again...")
                _send_config()

    def _send_config():
        if len(current_txids) > 0:
            _log.debug("DeviceMgr._send_config: there is currently an outstanding configuration, skipping", {"txids": current_txids})
        else:
            if target_conf is not None:
                current_txids = pending_txids
                pending_txids = set()
                _log.debug("DeviceMgr._send_config: sending intended target configuration", {"txids": current_txids})
                adapter.configure(_transaction_done, target_conf)
            else:
                _log.debug("_send_config: target_conf not set")

    def configure(new_conf: ?yang.gdata.Node, conf_modset_id: ?str, tid: str="0"):
        pending_txids.add(tid)
        if new_conf is not None and conf_modset_id is not None:
            if conf_modset_id != modset_id:
                _log.debug("DeviceMgr.configure: modset_id mismatch, ignoring configuration", {"conf_modset_id": str(conf_modset_id), "modset_id": str(modset_id)})
                return
            _log.debug("DeviceMgr.configure: received new intended configuration", {"tid": tid, "new_conf": truncate_conf(new_conf)})
            target_conf = new_conf
            _send_config()
        elif new_conf is None and conf_modset_id is None:
            _log.debug("DeviceMgr.configure: transaction registered intent to configure but awaiting reconf", {"tid": tid})
        else:
            _log.debug("DeviceMgr.configure: invalid input", {"conf_modset_id": str(conf_modset_id), "new_conf": truncate_conf(new_conf), "tid": tid})


    def wait_complete(tid: str, done: action(value)->None):
        if tid not in current_txids | pending_txids:
            _log.debug("DeviceMgr.wait_complete: transaction id not found, calling done", {"tid": tid})
            done(True) # Assume tid is very old and has already completed, thus respond immediately
        else:
            _log.debug("DeviceMgr.wait_complete: waiting for transaction to complete", {"tid": tid})
            callbacks[tid] = done

    def get_capabilities():
        return adapter.get_capabilities()

    def get_modules() -> (dict[str, ModCap], ?str):
        return modset, modset_id

    def _get_config_done(new_running_conf: ?yang.gdata.Node, error: ?Exception):
        if error is not None:
            _log.error("DeviceMgr._get_config_done: {str(error)}")
        if new_running_conf is not None:
            #if running_conf is not None:
            #    conf_diff = diff.diff(xml.encode(running_conf), xml.encode(new_running_conf))
            #    if conf_diff != "":
            #        _log.warning("DeviceMgr._get_config_done: Running config diff detected", {"diff": conf_diff})
            running_conf = new_running_conf

    def get_running_config():
        return running_conf

    def get_schema():
        return schema


class DeviceAdapter(object):
    """Abstract base class for Device Adapters
    """
    _log_handler: logging.Handler
    _wcap: ?WorldCap

    def __init__(self, dev: DeviceMgr, schema: DeviceSchema, log_handler, wcap):
        self._dev = dev
        self._schema = schema
        self._log_handler = log_handler
        self._wcap = wcap
        self._log = logging.Logger(self._log_handler)

    set_dmc: proc(new_dmc: DeviceMetaConfig) -> None

    ## Configure the device with the given configuration
    ##
    ## :param done: callback to call when the configuration is done
    ## :param new_conf: the new configuration to apply
    configure: proc(done: action(?Exception) -> None, new_conf: yang.gdata.Node) -> None

    get_capabilities: proc() -> list[str]

    get_modules: proc() -> dict[str, ModCap]

    ## Get the current running config from the device
    ##
    ## :param done: callback to call when the operation is completed
    ##
    ## This is an async operation with the results available in the callback.
    get_config: proc(done: action(?yang.gdata.Node, ?Exception) -> None) -> None


class NoAdapter(DeviceAdapter):
    def set_dmc(self, new_dmc):
        self._log.debug("NoAdapter.set_dmc", {"new_dmc": new_dmc.to_gdata().to_json()})

    def configure(self, done, new_conf):
        # The NoAdapter cannot configure anything, so we just call done() with False
        done(NotConnectedError())

    def get_capabilities(self):
        return []

    def get_modules(self):
        return {}

    def get_config(self, done: ?action(?yang.gdata.Node, ?Exception) -> None = None):
        pass


class MockAdapter(DeviceAdapter):
    """Mock device adapter
    """
    def __init__(self, dev: DeviceMgr, schema: DeviceSchema, log_handler, wcap: ?WorldCap):
        self._dev = dev
        self._schema = schema
        self._log_handler = log_handler
        self._wcap = wcap
        self._log = logging.Logger(self._log_handler)
        self._modset = {}
        self._dmc = None
        self._driver = MockDriver(self._dev, schema, self._log_handler, self._wcap)

    def set_dmc(self, new_dmc: DeviceMetaConfig):
        self._driver.set_dmc(new_dmc)

    def configure(self, done, new_conf):
        return self._driver.configure(done, new_conf)

    def get_capabilities(self) -> list[str]:
        return self._driver.get_capabilities()

    def get_modules(self) -> dict[str, ModCap]:
        return self._driver.get_modules()

    def get_config(self, done):
        return self._driver.get_config(done)


actor MockDriver(dev: DeviceMgr, schema: DeviceSchema, log_handler: logging.Handler, wcap: ?WorldCap):
    _log = logging.Logger(log_handler)
    _log.info("MockDriver starting up")

    var dmc: ?DeviceMetaConfig = None
    var modset: dict[str, ModCap] = {}

    var conn_state: int = NOT_CONNECTED
    var running_conf: ?yang.gdata.Node = None

    def set_dmc(new_dmc):
        if dmc is not None and new_dmc is not None:
            old_dmcg = dmc.to_gdata()
            new_dmcg = new_dmc.to_gdata()
            if old_dmcg is not None and new_dmcg is not None:
                if yang.gdata.diff(old_dmcg, new_dmcg) is not None:
                    _log.debug("Device.set_dmc: ignoring new device meta-config identical to current device meta-config")
                    return
        _log.debug("MockAdapter.set_dmc", {"new_dmc": new_dmc.to_gdata().to_json()})
        _dmc = new_dmc

        preset_caps = []
        if "cisco-ios-xr" in new_dmc.mock.preset:
            preset_caps.extend([
                "http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg?module=Cisco-IOS-XR-um-hostname-cfg&revision=2021-04-21",
                "http://cisco.com/ns/yang/Cisco-IOS-XR-um-interface-cfg?module=Cisco-IOS-XR-um-interface-cfg&revision=2022-07-11",
                "http://cisco.com/ns/yang/Cisco-IOS-XR-um-if-ipv4-cfg?module=Cisco-IOS-XR-um-if-ipv4-cfg&revision=2022-07-11",
            ])
        if "juniper-junos" in new_dmc.mock.preset:
            preset_caps.extend([
                "http://xml.juniper.net/netconf/junos/1.0",
                "http://xml.juniper.net/dmi/system/1.0",
            ])
        for cap in preset_caps:
            m = parse_cap(cap)
            modset[m.name] = m
            _log.debug("Adding preset cap", {"cap": m.name})
#
        if len(new_dmc.mock.module.elements) > 0:
            for mock_cap in new_dmc.mock.module.elements:
                m = ModCap(mock_cap.name, mock_cap.namespace, mock_cap.revision, mock_cap.feature)
                _log.debug("Adding mock cap", {"cap": m.name})
                modset[m.name] = m

        if len(modset) > 0:
            _log.debug("Mock capabilities set, \"connecting\"...")
            conn_state = CONNECTED
            dev.on_connect(modset)
        else:
            _log.debug("No mock capabilities set, idling as not connected")

    def configure(done, new_conf):
        if conn_state == CONNECTED:
            _log.debug("MockAdapter.configure: device 'connected', responding done")
            running_conf = new_conf
            done(None)
        else:
            _log.debug("MockAdapter.configure: device not connected")
            done(NotConnectedError())

    def get_capabilities():
        return []

    def get_modules():
        return modset

    def get_config(done):
        if done is not None:
            done(running_conf, None)


class NetconfAdapter(DeviceAdapter):

    def __init__(self, dev: DeviceMgr, schema: DeviceSchema, log_handler, wcap: ?WorldCap):
        self._dev = dev
        self._schema = schema
        self._log_handler = log_handler
        self._wcap = wcap
        self._log = logging.Logger(self._log_handler)
        self._driver = NetconfDriver(self._dev, self._schema, self._log_handler, self._wcap)

    def set_dmc(self, new_dmc: DeviceMetaConfig):
        self._driver.set_dmc(new_dmc)

    def configure(self, done, new_conf):
        return self._driver.configure(done, new_conf)

    def get_capabilities(self) -> list[str]:
        return self._driver.get_capabilities()

    def get_modules(self) -> dict[str, ModCap]:
        return self._driver.get_modules()

    def get_config(self, done: ?action(?yang.gdata.Node, ?Exception) -> None) -> None:
        self._driver.get_config(done)


actor NetconfDriver(dev: DeviceMgr, schema: DeviceSchema, log_handler: logging.Handler, wcap: ?WorldCap):
    """NETCONF device adapter
    """
    _log = logging.Logger(log_handler)
    _log.info("NetconfDriver starting up")

    # Orchestron's intended target configuration, that we want on the device.
    var target_conf: ?yang.gdata.Node = None

    # The currently running configuration on the device (which in NMDA lingo is
    # the "intended configuration" of the device)
    var running_conf: ?yang.gdata.Node = None
    var running_conf_xml: ?xml.Node = None

    # The device's meta configuration, like address, credentials, etc.
    var dmc: ?DeviceMetaConfig = None

    # The NETCONF client connection to the device
    var client: ?netconf.Client = None

    var conn_state: int = NOT_CONNECTED
    var error: ?Exception = None
    var on_done: ?action(?Exception) -> None = None

    var modset: dict[str, ModCap] = {}

    def _on_connect(c: netconf.Client, err):
        if client is not None and c is not client:
            _log.debug("Device._on_connect: ignoring connection from old client")
            return

        if err is not None:
            if conn_state == CONNECTING:
                _log.error("Device._on_connect: error connecting to device", {"error": str(err)})
            else:
                _log.debug("Device._on_connect: connection failed", {"error": str(err)})
            modset = {}
            if client is not None:
                after 1: client.restart()
            return
        else:
            _log.info("Device._on_connect: connected to device")
            conn_state = CONNECTED

            new_modset: dict[str, ModCap] = {}
            for cap in c.get_capabilities():
                m = parse_cap(cap)
                new_modset[m.name] = m

            # TODO: check yang-library instead!!

            if not modset_eq(modset, new_modset):
                modset = new_modset

            dev.on_connect(modset)

    def _on_notif(c, n):
        if client is not None and c is not client:
            _log.debug("Device._on_connect: ignoring connection from old client")
            return
        _log.debug("Notification from device")

    def set_dmc(new_dmc: DeviceMetaConfig):
        _log.debug("Device.set_dmc", {"new_dmc": new_dmc.to_gdata().to_json()})
        if dmc is not None and new_dmc is not None:
            old_dmcg = dmc.to_gdata()
            new_dmcg = new_dmc.to_gdata()
            if old_dmcg is not None and new_dmcg is not None:
                if yang.gdata.diff(old_dmcg, new_dmcg) is not None:
                    _log.debug("Device.set_dmc: ignoring new device meta-config identical to current device meta-config")
                    return

        if not len(new_dmc.address.elements) > 0:
            _log.debug("Not enough addressess :/")
            return

        addr = new_dmc.address.elements[0]
        address = addr.address
        addr_port = addr.port
        port = int(addr_port) if addr_port is not None else 830
        username = new_dmc.credentials.username
        password = new_dmc.credentials.password

        # TODO: we only need o use a new client if connection parameters have
        # changed, other settings don't require a new client

        if wcap is not None and username is not None and password is not None:
            conn_state = CONNECTING
            _log.debug(f"Setting up NETCONF client... {address} {port} {username} {password}")
            c = netconf.Client(wcap, address, port, username, password,
                               on_connect=_on_connect,
                               on_notif=_on_notif,
                               log_handler=log_handler)
            client = c
        dmc = new_dmc

    # TODO: Close protocol
    def close():
        """Close the connection to the device
        """
        _log.debug("Device.close")
        if client is not None:
            client.close()
            conn_state = NOT_CONNECTED
            _log.debug("Device closed")
        else:
            _log.debug("Device.close: No client, nothing to close")

    # TODO: Restart protocol
    def restart():
        """Close the existing connection and reconnect to the device
        """
        _log.debug("Device.restart")
        #close()
        #connect()

    def configure(done: action(?Exception) -> None, new_conf: yang.gdata.Node):
        if on_done is not None:
            _log.debug("Device.configure: Already in transaction, cannot send configuration")
            return

        if target_conf == new_conf:
            _log.debug("Device.configure: ignoring new configuration identical to current intended configuration")
            done()
        else:
            _log.debug("Device.configure: new configuration")
            if conn_state != CONNECTED:
                _log.debug("Device.configure: device not connected, cannot send configuration")
                done(NotConnectedError())
                return

            target_conf = new_conf
            xml_conf = new_conf.to_xmlstr(pretty=False)
            if xml_conf == "":
                # Cisco IOS XRd doesn't like empty <edit-config>, returns error
                _log.debug("Device.edit_config Config is empty, noop")
                done()
                return

            if client is not None:
                on_done = done
                target_datastore = "running" if _is_writable_running() else "candidate"
                _log.debug("Device.configure: edit_config", {"datastore": target_datastore})
                client.edit_config(xml_conf, _on_conf, datastore=target_datastore)
            else:
                _log.debug("Device.configure: No client, cannot send config")

    def get_capabilities():
        if client is not None:
            return client.get_capabilities()
        return []

    def get_modules():
        return modset

    def _is_writable_running():
        return "urn:ietf:params:netconf:capability:writable-running:1.0" in modset

    def _transaction_done(error: ?Exception=None):
        """Internal function called when transaction is done
        """
        _log.debug("Device._transaction_done", {"error": str(error)})
        if on_done is not None:
            on_done(error)
        on_done = None
        if client is not None:
            client.get_config(_on_get_config)

    def _on_conf(c, r):
        if r is not None:
            _log.debug("Device._on_conf", {"r": r.encode()})
            if not _is_writable_running():
                # We edit-config'd candidate, now commit
                c.commit(_on_commit)
            else:
                _transaction_done()
        else:
            _log.debug("Device._on_conf: Device disconnected")
            _transaction_done(NotConnectedError())

    def _on_commit(c, r):
        if r is not None:
            _log.debug("Device._on_commit", {"r": r.encode()})
            if any(filter(lambda c: c.tag == "rpc-error", r.children)) and not _is_writable_running():
                # We commit'ed candidate, but got an error, now discard-changes
                # TODO: what if the device does this (:rollback-on-error)?!
                c.discard_changes(lambda c, r: _on_discard_changes(c, r, error=ConfigError("Commit failed")))
            else:
                _transaction_done()
        else:
            _log.debug("Device._on_commit: Device disconnected")
            _transaction_done(NotConnectedError())

    def _on_discard_changes(c, r, error=None):
        if r is not None:
            _log.debug("Device._on_discard_changes", {"r": r.encode()})
            _transaction_done(error)
        else:
            _log.debug("Device._on_discard_changes: Device disconnected")
            _transaction_done(NotConnectedError())

    def _on_get_config(c, r, cb: ?action(?yang.gdata.Node, ?Exception) -> None=None):
        _log.debug("Device._on_get_config")
        if r is not None:
            _log.debug("Device._on_get_config: r is not None")
            if r.tag == "rpc-reply" and len(r.children) == 1 and r.children[0].tag == "data":
                _log.debug("Device._on_get_config", {"r": r.encode()})
                running_conf = schema.from_xml(r.children[0])
                if cb is not None:
                    cb(running_conf, None)
            else:
                _log.error("Device._on_get_config", {"r": r.encode()})
                if cb is not None:
                    cb(None, ValueError("Unexpected response to <get-config>"))

    def get_config(done: ?action(?yang.gdata.Node, ?Exception) -> None) -> None:
        _log.debug("Device._get_config")
        if client is not None:
            client.get_config(lambda c, r: _on_get_config(c, r, done))


def hash_modset(modset: dict[str, ModCap]) -> str:
    # TODO: use a better hash function
    # We use map here instead of a list comprehension to avoid creating the
    # intermediate list of strings. Ideally we could achieve the same with a
    # generator expression.
    modset_str = map(lambda m: str(modset[m]), sorted(modset.keys()))
    return str(hash("".join(modset_str)))

def modset_eq(a: dict[str, ModCap], b: dict[str, ModCap]) -> bool:
    if len(a) != len(b):
        return False
    if set(a.keys()) != set(b.keys()):
        return False
    for k in a.keys():
        if a[k] != b[k]:
            return False
    return True


def parse_cap(tcap: str) -> ModCap:
    parts = tcap.split("?", 1)

    name = parts[0]
    namespace = parts[0]
    revision = None
    feature = []

    qps = {}
    if len(parts) > 1:
        qparts = parts[1].split("&")
        for qpart in qparts:
            qkvparts = qpart.split("=")
            if len(qkvparts) == 2:
                qk, qv = qkvparts[0], qkvparts[1]
                qps[qk] = qv

    if "module" in qps:
        name = qps["module"]
    if "revision" in qps:
        revision = qps["revision"]

    return ModCap(name, namespace, revision, feature)


def _test_parse_cap_base():
    mod = parse_cap("urn:ietf:params:netconf:base:1.1")
    testing.assertEqual(mod.name, "urn:ietf:params:netconf:base:1.1")
    testing.assertEqual(mod.namespace, "urn:ietf:params:netconf:base:1.1")
    testing.assertEqual(mod.revision, None)
    testing.assertEqual(mod.feature, [])

def _test_parse_cap_xr_isis():
    mod = parse_cap("http://cisco.com/ns/yang/Cisco-IOS-XR-isis-act?module=Cisco-IOS-XR-isis-act&revision=2019-10-01")
    testing.assertEqual(mod.name, "Cisco-IOS-XR-isis-act")
    testing.assertEqual(mod.namespace, "http://cisco.com/ns/yang/Cisco-IOS-XR-isis-act")
    testing.assertEqual(mod.revision, "2019-10-01")
    testing.assertEqual(mod.feature, [])

def _test_parse_cap_xr_hostname():
    mod = parse_cap("http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg?module=Cisco-IOS-XR-um-hostname-cfg&revision=2021-04-21")
    testing.assertEqual(mod.name, "Cisco-IOS-XR-um-hostname-cfg")
    testing.assertEqual(mod.namespace, "http://cisco.com/ns/yang/Cisco-IOS-XR-um-hostname-cfg")
    testing.assertEqual(mod.revision, "2021-04-21")
    testing.assertEqual(mod.feature, [])
