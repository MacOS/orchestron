# SPDX-FileCopyrightText: 2025 Deutsche Telekom AG
# SPDX-License-Identifier: BSD-3-Clause
# License-Filename: LICENSES/BSD-3-Clause.txt


import base64
import json
import xml
import yang.adata
import yang.gdata
from yang.identity import complete_and_validate_identityref
from yang.identityref import Identityref, PartialIdentityref
from yang.schema import DIdentity

# == This file is generated ==











class orchestron_rfs__device__address__initial_credentials_entry(yang.adata.MNode):
    username: str
    password: str
    key: str

    mut def __init__(self, username: str, password: str, key: str):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.username = username
        self.password = password
        self.key = key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _username = self.username
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        _key = self.key
        if _key is not None:
            children['key'] = yang.gdata.Leaf('string', _key)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__address__initial_credentials_entry:
        return orchestron_rfs__device__address__initial_credentials_entry(username=n.get_str('username'), password=n.get_str('password'), key=n.get_str('key'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/address/initial-credentials')
            res.append('{self_name} = orchestron_rfs__device__address__initial_credentials({repr(self.username)}, {repr(self.password)}, {repr(self.key)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/address/initial-credentials'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__device__address__initial_credentials(yang.adata.MNode):
    elements: list[orchestron_rfs__device__address__initial_credentials_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'initial-credentials'
        self.elements = elements

    mut def create(self, username, password, key):
        for e in self.elements:
            match = True
            if e.username != username:
                match = False
                continue
            if e.password != password:
                match = False
                continue
            if e.key != key:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__device__address__initial_credentials_entry(username, password, key)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['username', 'password', 'key'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__device__address__initial_credentials_entry]:
        if n is not None:
            return [orchestron_rfs__device__address__initial_credentials_entry.from_gdata(e) for e in n.elements]
        return []


class orchestron_rfs__device__address_entry(yang.adata.MNode):
    name: str
    address: str
    port: ?str
    initial_credentials: orchestron_rfs__device__address__initial_credentials

    mut def __init__(self, name: str, address: str, port: ?str, initial_credentials: list[orchestron_rfs__device__address__initial_credentials_entry]=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.name = name
        self.address = address
        self.port = port
        self.initial_credentials = orchestron_rfs__device__address__initial_credentials(elements=initial_credentials)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _address = self.address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('union', _address)
        _port = self.port
        if _port is not None:
            children['port'] = yang.gdata.Leaf('string', _port)
        _initial_credentials = self.initial_credentials
        if _initial_credentials is not None:
            children['initial-credentials'] = _initial_credentials.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__address_entry:
        return orchestron_rfs__device__address_entry(name=n.get_str('name'), address=n.get_str('address'), port=n.get_opt_str('port'), initial_credentials=orchestron_rfs__device__address__initial_credentials.from_gdata(n.get_opt_list('initial-credentials')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/address')
            res.append('{self_name} = orchestron_rfs__device__address({repr(self.name)}, {repr(self.address)})')
        leaves = []
        _port = self.port
        if _port is not None:
            leaves.append('{self_name}.port = {repr(_port)}')
        _initial_credentials = self.initial_credentials
        for _element in _initial_credentials.elements:
            res.append('')
            res.append("# List /device/address/initial-credentials element: {_element.to_gdata().key_str(['username', 'password', 'key'])}")
            list_elem = 'initial_credentials_element = {self_name}.initial_credentials.create({repr(_element.username)}, {repr(_element.password)}, {repr(_element.key)})'
            res.append(list_elem)
            res.extend(_element.prsrc('initial_credentials_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__device__address(yang.adata.MNode):
    elements: list[orchestron_rfs__device__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'address'
        self.elements = elements

    mut def create(self, name, address):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__device__address_entry(name, address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__device__address_entry]:
        if n is not None:
            return [orchestron_rfs__device__address_entry.from_gdata(e) for e in n.elements]
        return []






class orchestron_rfs__device__credentials__key_entry(yang.adata.MNode):
    key: str
    private_key: ?str

    mut def __init__(self, key: str, private_key: ?str):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.key = key
        self.private_key = private_key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _key = self.key
        if _key is not None:
            children['key'] = yang.gdata.Leaf('string', _key)
        _private_key = self.private_key
        if _private_key is not None:
            children['private-key'] = yang.gdata.Leaf('string', _private_key)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__credentials__key_entry:
        return orchestron_rfs__device__credentials__key_entry(key=n.get_str('key'), private_key=n.get_opt_str('private-key'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/credentials/key')
            res.append('{self_name} = orchestron_rfs__device__credentials__key({repr(self.key)})')
        leaves = []
        _private_key = self.private_key
        if _private_key is not None:
            leaves.append('{self_name}.private_key = {repr(_private_key)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/credentials/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__device__credentials__key(yang.adata.MNode):
    elements: list[orchestron_rfs__device__credentials__key_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'key'
        self.elements = elements

    mut def create(self, key):
        for e in self.elements:
            match = True
            if e.key != key:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__device__credentials__key_entry(key)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['key'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__device__credentials__key_entry]:
        if n is not None:
            return [orchestron_rfs__device__credentials__key_entry.from_gdata(e) for e in n.elements]
        return []


class orchestron_rfs__device__credentials(yang.adata.MNode):
    username: str
    password: ?str
    key: orchestron_rfs__device__credentials__key

    mut def __init__(self, username: str, password: ?str, key: list[orchestron_rfs__device__credentials__key_entry]=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.username = username
        self.password = password
        self.key = orchestron_rfs__device__credentials__key(elements=key)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _username = self.username
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> orchestron_rfs__device__credentials:
        if n is not None:
            return orchestron_rfs__device__credentials(username=n.get_str('username'), password=n.get_opt_str('password'), key=orchestron_rfs__device__credentials__key.from_gdata(n.get_opt_list('key')))
        raise ValueError('Missing required subtree orchestron_rfs__device__credentials')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/credentials')
            res.append('{self_name} = orchestron_rfs__device__credentials({repr(self.username)})')
        leaves = []
        _password = self.password
        if _password is not None:
            leaves.append('{self_name}.password = {repr(_password)}')
        _key = self.key
        for _element in _key.elements:
            res.append('')
            res.append("# List /device/credentials/key element: {_element.to_gdata().key_str(['key'])}")
            list_elem = 'key_element = {self_name}.key.create({repr(_element.key)})'
            res.append(list_elem)
            res.extend(_element.prsrc('key_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/credentials'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)





class orchestron_rfs__device__initial_credentials_entry(yang.adata.MNode):
    username: str
    password: str
    key: str

    mut def __init__(self, username: str, password: str, key: str):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.username = username
        self.password = password
        self.key = key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _username = self.username
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        _key = self.key
        if _key is not None:
            children['key'] = yang.gdata.Leaf('string', _key)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__initial_credentials_entry:
        return orchestron_rfs__device__initial_credentials_entry(username=n.get_str('username'), password=n.get_str('password'), key=n.get_str('key'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/initial-credentials')
            res.append('{self_name} = orchestron_rfs__device__initial_credentials({repr(self.username)}, {repr(self.password)}, {repr(self.key)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/initial-credentials'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__device__initial_credentials(yang.adata.MNode):
    elements: list[orchestron_rfs__device__initial_credentials_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'initial-credentials'
        self.elements = elements

    mut def create(self, username, password, key):
        for e in self.elements:
            match = True
            if e.username != username:
                match = False
                continue
            if e.password != password:
                match = False
                continue
            if e.key != key:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__device__initial_credentials_entry(username, password, key)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['username', 'password', 'key'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__device__initial_credentials_entry]:
        if n is not None:
            return [orchestron_rfs__device__initial_credentials_entry.from_gdata(e) for e in n.elements]
        return []







class orchestron_rfs__device__mock__module_entry(yang.adata.MNode):
    name: str
    namespace: str
    revision: ?str
    feature: list[str]

    mut def __init__(self, name: str, namespace: str, revision: ?str, feature: ?list[str]=None):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.name = name
        self.namespace = namespace
        self.revision = revision
        self.feature = feature if feature is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _namespace = self.namespace
        if _namespace is not None:
            children['namespace'] = yang.gdata.Leaf('string', _namespace)
        _revision = self.revision
        if _revision is not None:
            children['revision'] = yang.gdata.Leaf('string', _revision)
        _feature = self.feature
        if _feature is not None:
            children['feature'] = yang.gdata.LeafList('string', _feature)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__mock__module_entry:
        return orchestron_rfs__device__mock__module_entry(name=n.get_str('name'), namespace=n.get_str('namespace'), revision=n.get_opt_str('revision'), feature=n.get_opt_strs('feature'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/mock/module')
            res.append('{self_name} = orchestron_rfs__device__mock__module({repr(self.name)}, {repr(self.namespace)})')
        leaves = []
        _revision = self.revision
        if _revision is not None:
            leaves.append('{self_name}.revision = {repr(_revision)}')
        _feature = self.feature
        if _feature is not None:
            leaves.append('{self_name}.feature = {repr(_feature)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/mock/module'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__device__mock__module(yang.adata.MNode):
    elements: list[orchestron_rfs__device__mock__module_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'module'
        self.elements = elements

    mut def create(self, name, namespace):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__device__mock__module_entry(name, namespace)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__device__mock__module_entry]:
        if n is not None:
            return [orchestron_rfs__device__mock__module_entry.from_gdata(e) for e in n.elements]
        return []


class orchestron_rfs__device__mock(yang.adata.MNode):
    preset: list[str]
    module: orchestron_rfs__device__mock__module

    mut def __init__(self, preset: ?list[str]=None, module: list[orchestron_rfs__device__mock__module_entry]=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.preset = preset if preset is not None else []
        self.module = orchestron_rfs__device__mock__module(elements=module)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _preset = self.preset
        if _preset is not None:
            children['preset'] = yang.gdata.LeafList('enumeration', _preset)
        _module = self.module
        if _module is not None:
            children['module'] = _module.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> orchestron_rfs__device__mock:
        if n is not None:
            return orchestron_rfs__device__mock(preset=n.get_opt_strs('preset'), module=orchestron_rfs__device__mock__module.from_gdata(n.get_opt_list('module')))
        return orchestron_rfs__device__mock()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/mock')
            res.append('{self_name} = orchestron_rfs__device__mock()')
        leaves = []
        _preset = self.preset
        if _preset is not None:
            leaves.append('{self_name}.preset = {repr(_preset)}')
        _module = self.module
        for _element in _module.elements:
            res.append('')
            res.append("# List /device/mock/module element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'module_element = {self_name}.module.create({repr(_element.name)}, {repr(_element.namespace)})'
            res.append(list_elem)
            res.extend(_element.prsrc('module_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/mock'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


class orchestron_rfs__device_entry(yang.adata.MNode):
    name: str
    description: ?str
    type: ?str
    address: orchestron_rfs__device__address
    credentials: orchestron_rfs__device__credentials
    initial_credentials: orchestron_rfs__device__initial_credentials
    mock: orchestron_rfs__device__mock

    mut def __init__(self, name: str, credentials: orchestron_rfs__device__credentials, description: ?str, type: ?str, address: list[orchestron_rfs__device__address_entry]=[], initial_credentials: list[orchestron_rfs__device__initial_credentials_entry]=[], mock: ?orchestron_rfs__device__mock=None):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.name = name
        self.description = description
        self.type = type
        self.address = orchestron_rfs__device__address(elements=address)
        self.credentials = credentials
        self.initial_credentials = orchestron_rfs__device__initial_credentials(elements=initial_credentials)
        self.mock = mock if mock is not None else orchestron_rfs__device__mock()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('string', _type)
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        _credentials = self.credentials
        if _credentials is not None:
            children['credentials'] = _credentials.to_gdata()
        _initial_credentials = self.initial_credentials
        if _initial_credentials is not None:
            children['initial-credentials'] = _initial_credentials.to_gdata()
        _mock = self.mock
        if _mock is not None:
            children['mock'] = _mock.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device_entry:
        return orchestron_rfs__device_entry(name=n.get_str('name'), description=n.get_opt_str('description'), type=n.get_opt_str('type'), address=orchestron_rfs__device__address.from_gdata(n.get_opt_list('address')), credentials=orchestron_rfs__device__credentials.from_gdata(n.get_cnt('credentials')), initial_credentials=orchestron_rfs__device__initial_credentials.from_gdata(n.get_opt_list('initial-credentials')), mock=orchestron_rfs__device__mock.from_gdata(n.get_opt_cnt('mock')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device')
            res.append('self_credentials = orchestron_rfs__device__credentials({repr(self.credentials.username)})')
            res.append('{self_name} = orchestron_rfs__device({repr(self.name)}, self_credentials)')
        leaves = []
        _name = self.name
        if _name is not None:
            leaves.append('{self_name}.name = {repr(_name)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /device/address element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.name)}, {repr(_element.address)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        _credentials = self.credentials
        if _credentials is not None:
            res.extend(_credentials.prsrc('{self_name}.credentials', False).splitlines())
        _initial_credentials = self.initial_credentials
        for _element in _initial_credentials.elements:
            res.append('')
            res.append("# List /device/initial-credentials element: {_element.to_gdata().key_str(['username', 'password', 'key'])}")
            list_elem = 'initial_credentials_element = {self_name}.initial_credentials.create({repr(_element.username)}, {repr(_element.password)}, {repr(_element.key)})'
            res.append(list_elem)
            res.extend(_element.prsrc('initial_credentials_element', False, list_element=True).splitlines())
        _mock = self.mock
        if _mock is not None:
            res.extend(_mock.prsrc('{self_name}.mock', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /device'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__device(yang.adata.MNode):
    elements: list[orchestron_rfs__device_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'device'
        self.elements = elements

    mut def create(self, name, credentials):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__device_entry(name, credentials)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://orchestron.org/yang/orchestron-rfs.yang', module='orchestron-rfs')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__device_entry]:
        if n is not None:
            return [orchestron_rfs__device_entry.from_gdata(e) for e in n.elements]
        return []


schema_namespaces: set[str] = {
    'http://orchestron.org/yang/orchestron-rfs.yang',
}
