
import yang
import yang.schema as schema

#def wrap_transform(fq_transform_fn: str)
#    short_transform_fn = fq_transform_fn.split(".")[-1]
#    res = """class Wrapped%s(%s):
#    def transform_wrapper(self, i: yang.gdata.Node) -> yang.gdata.Node:
#        mi = %s.from_gdata(i)
#        return self.transform(mi).to_gdata()
#""" % (short_transform_fn, fq_transform_fn)
#    return res

def get_list_name(sn: schema.DList) -> str:
    sn_parent = sn.parent
    if sn_parent is not None:
        return sn.name
    raise NotImplementedError("List without parent")

class TTTSrc(object):
    def __init__(self, src: str, input_classes: list[str], imports: list[str], defs: list[str], base_defs: list[str]):
        self.src = src
        self.input_classes = input_classes
        self.imports = imports
        self.defs = defs
        self.base_defs = base_defs

def children_to_tttsrc(sn: schema.DNodeInner) -> TTTSrc:
    input_classes = []
    imports = []
    defs = []
    base_defs = []
    elems = []
    for child in sn.children:
        if isinstance(child, schema.DLeaf):
            continue
        res = dschema_to_tttsrc(child)
        input_classes.extend(res.input_classes)
        imports.extend(res.imports)
        defs.extend(res.defs)
        base_defs.extend(res.base_defs)
        elems.append('"%s": %s' % (child.name, res.src))
    children_src = ", ".join(elems)
    return TTTSrc(src=children_src, input_classes=input_classes, imports=imports, defs=defs, base_defs=base_defs)

def dschema_to_tttsrc(sn: schema.DNode, indent=0) -> TTTSrc:
    input_classes = []
    imports = []
    defs = []
    base_defs = []
    if isinstance(sn, schema.DList):
        for ext in sn.exts:
            extprefix = ext.prefix
            if extprefix is not None and extprefix == "orchestron":
                extarg = ext.arg
                if ext.name == "transform" or ext.name == "rfs-transform":
                    if extarg is not None:
                        transform = extarg
                        # TODO: somewhere we should check that the transform
                        # reference is valid, i.e. an instance of ttx.Transform
                        transform_module = ".".join(transform.split(".")[:-1])
                        transform_name = transform.split(".")[-1]
                        imports.append("import %s" % transform_module)
                        input_class = schema.get_path_name(sn)
                        if isinstance(sn, schema.DList):
                            input_class += "_entry"
                        input_classes.append(input_class)
                        if ext.name == "transform":
                            base_defs.append("""class %s(ttx.TransformFunction):
    transform: mut(%s) -> yang.adata.MNode

    @staticmethod
    def input_type():
        \"\"\"Return the modeled input type for this transform\"\"\"
        return %s

    mut def transform_wrapper(self, i: yang.gdata.Node) -> yang.gdata.Node:
        \"\"\"Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        \"\"\"
        modeled_input = %s.from_gdata(i)
        return self.transform(modeled_input).to_gdata()

    mut def transform_xml(self, i: xml.Node) -> yang.gdata.Node:
        \"\"\"Wrap the user provided transform method to convert from XML to
        modeled input and return gdata
        \"\"\"
        modeled_input = %s.from_xml(i)
        return self.transform(modeled_input).to_gdata()
""" % (transform_name, input_class, input_class, input_class, input_class))
                            return TTTSrc(src="ttx.List(ttx.Transform(%s, log_handler))" % transform, input_classes=input_classes, imports=imports, defs=defs, base_defs=base_defs)
                        elif ext.name == "rfs-transform":
                            base_defs.append("""class %s(ttx.RFSFunction):
    transform: mut(%s, ttx.DeviceInfo) -> yang.adata.MNode

    @staticmethod
    def input_type():
        \"\"\"Return the modeled input type for this transform\"\"\"
        return %s

    mut def transform_wrapper(self, i: yang.gdata.Node, device_info: ttx.DeviceInfo) -> yang.gdata.Node:
        \"\"\"Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        \"\"\"
        modeled_input = %s.from_gdata(i)
        return self.transform(modeled_input, device_info).to_gdata()

    mut def transform_xml(self, i: xml.Node, device_info: ttt.DeviceInfo) -> yang.gdata.Node:
        \"\"\"Wrap the user provided transform method to convert from XML to
        modeled input and return gdata
        \"\"\"
        modeled_input = %s.from_xml(i)
        return self.transform(modeled_input, device_info).to_gdata()
""" % (transform_name, input_class, input_class, input_class))
                            return TTTSrc(src="ttx.List(ttx.RFSTransform(%s, dev_mgr, log_handler))" % transform, input_classes=input_classes, imports=imports, defs=defs, base_defs=base_defs)
                        raise ValueError("Unknown extension name: %s" % ext.name)
                    else:
                        raise ValueError("Missing argument to orchestron:transform. Add path to transform as arg.")
                elif ext.name == "device":
                    if extarg is not None:
                        raise ValueError("Extraneous argument to orchestron:device. Remove argument.")
                    return TTTSrc(src="ttx.List(ttx.Device(dev_mgr, log_handler))", input_classes=input_classes, imports=imports, defs=defs, base_defs=base_defs)
                elif ext.name == "device-config":
                    if extarg is not None:
                        raise ValueError("Extraneous argument to orchestron:device-config. Remove argument.")
                    return TTTSrc(src="ttx.List(ttx.DeviceConfig(dev_mgr, log_handler))", input_classes=input_classes, imports=imports, defs=defs, base_defs=base_defs)

        # List without an extension
        children_res = children_to_tttsrc(sn)
        input_classes.extend(children_res.input_classes)
        imports.extend(children_res.imports)
        defs.extend(children_res.defs)
        base_defs.extend(children_res.base_defs)
        return TTTSrc(src="ttx.List(ttx.Container({%s}))" % children_res.src, input_classes=input_classes, imports=imports, defs=defs, base_defs=base_defs)

    elif isinstance(sn, schema.DNodeInner):
        sn_children = sn.children
        children_res = children_to_tttsrc(sn)
        input_classes.extend(children_res.input_classes)
        imports.extend(children_res.imports)
        defs.extend(children_res.defs)
        base_defs.extend(children_res.base_defs)
        return TTTSrc(src="ttx.Container({%s})" % children_res.src, input_classes=input_classes, imports=imports, defs=defs, base_defs=base_defs)

    raise NotImplementedError("Unhandled schema type: %s" % str(type(sn)))

def ttt_prsrc(sn: schema.DNode, input_yang_module: str, output_yang_module: ?str) -> (base: str, ttt: str):
    ts = dschema_to_tttsrc(sn)

    base_src = "# WARNING WARNING WARNING WARNING WARNING\n"
    base_src += "# DO NOT MODIFY THIS FILE!! This file is generated!\n"
    base_src += "# WARNING WARNING WARNING WARNING WARNING\n\n"
    base_src += "import logging\nimport xml\nimport orchestron.ttx as ttx\nimport yang.adata\nimport yang.gdata\n\n"
    for ic in ts.input_classes:
        base_src += "from %s import %s\n" % (input_yang_module, ic)

    if output_yang_module is not None:
        base_src += "from %s import root as output_root\n\n" % output_yang_module
        base_src += "def o_root():\n"
        base_src += "    return output_root()\n\n"

    base_src += "\n"
    base_src += "\n".join(ts.base_defs)

    ttt_src = "# WARNING WARNING WARNING WARNING WARNING\n"
    ttt_src += "# DO NOT MODIFY THIS FILE!! This file is generated!\n"
    ttt_src += "# WARNING WARNING WARNING WARNING WARNING\n\n"
    ttt_src += "import logging\n\n"
    ttt_src += "import orchestron.device as odev\n"
    ttt_src += "import orchestron.ttx as ttx\nimport yang.adata\nimport yang.gdata\n\n"
    for ic in ts.input_classes:
        ttt_src += "from %s import %s\n" % (input_yang_module, ic)
    ttt_src += "\n"
    ttt_src += "\n".join(list(set(ts.imports))) + "\n\n"
    ttt_src += "def get_ttx(dev_mgr: odev.DeviceManager, log_handler: logging.Handler) -> proc(list[str])->ttx.Node:\n"
    ttt_src += "    r = " + ts.src + "\n    return r\n"
    return (base=base_src, ttt=ttt_src)
