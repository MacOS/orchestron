import yang.adata
#import orchestron.gdata as gdata
import yang.gdata as gdata
import orchestron.device as odev
from orchestron.device_meta_config import orchestron_rfs__device_entry as DeviceMetaConfig
import xml, logging

def transpose(cfg_per_src: dict[str, gdata.Node]) -> dict[str, dict[str, gdata.Node]]:
    cfg_per_key = {}
    for src, conf in cfg_per_src.items():
        if isinstance(conf, gdata.List):
            for le in conf.elements:
                key = le.key_str()
                if key in cfg_per_key:
                    cfg_per_key[key][src] = le
                else:
                    cfg_per_key[key] = {src: le}
        elif isinstance(conf, gdata.Inner):
            for key, subconf in conf.children.items():
                if key in cfg_per_key:
                    cfg_per_key[key][src] = subconf
                else:
                    cfg_per_key[key] = {src: subconf}
        else:
            raise NotImplementedError("Cannot transpose configuration type" + str(type(conf)))

    return cfg_per_key

def difference(a: ?gdata.Node, b: gdata.Node) -> gdata.Node:
    if a is not None:
        d = gdata.diff(a, b)
        return d if d is not None else gdata.Absent()
    else:
        return b

def patch(conf: dict[str,gdata.Node], diff: dict[str,gdata.Node]) -> dict[str,gdata.Node]:
    res = {}
    for s,d in diff.items():
        if s in conf:
            p = gdata.patch(conf[s], d)
            if p is not None:
                res[s] = p
        else:
            res[s] = d
    for s,c in conf.items():
        if s not in diff:
            res[s] = c
    return res

def assert_complete(conf: gdata.Node):
    return conf

def merge(cfg_per_src: dict[str,gdata.Node]):
    acc = None
    for conf in cfg_per_src.values():
        if acc is not None:
            acc = gdata.merge(acc, conf)
        else:
            acc = conf
    if acc is not None:
        return acc
    else:
        raise ValueError("Nothing to merge")


##################### Node & Transactions #####################

class YieldState(object):
    it: Iterator[str]
    key: str
    tid: str
    out: Session
    results: dict[str,value]
    @property
    done: action(value) -> None

    def __init__(self, it, key, tid, out, done):
        self.it = it
        self.key = key
        self.tid = tid
        self.out = out
        self.results = {}
        self.done = done


actor Node(impl: _Node):
    def newtrans():
        return impl.newtrans()

    def get():
        return impl.get()

class _Node(object):
    newtrans: proc() -> Transaction
    get: proc() -> gdata.Node


actor Transaction(impl: _Transaction):
    def configure(tid, diff, out, key_ctx=[]):
        return impl.configure(tid, diff, out, key_ctx)

    # yield action
    def lock(tid, out, done):
        impl.lock(self, tid, out, done)

    def lock_cont(res):
        impl.lock_cont(self, res)

    def commit(tid, ok):
        impl.commit(tid, ok)

    def get():
        return impl.get()

class _Transaction(object):
    configure:  proc(tid: str, diff: dict[str,gdata.Node], out: Session, key_ctx: list[str]) -> value
    # yield action
    lock : proc(actself: Transaction, tid: str, out: Session, done: action(value) -> None) -> None
    lock_cont : proc(actself: Transaction, res: value) -> None
    commit: proc(tid: str, ok: bool) -> None
    get: proc() -> gdata.Node


####################### Layer ########################

actor GenLayer(impl: _GenLayer):

    def newsession():
        return impl.newsession()

class _GenLayer(object):
    newsession: proc() -> Session


actor Session(impl: _Session):
    # yield action
    def edit_config(diff, done):
        impl.edit_config(self, diff, done)

    def edit_config_cont(res):
        impl.edit_config_cont(res)

    def configure(tid, diff_per_source):
        impl.configure(tid, diff_per_source)

    def apply(tid):
        return impl.apply(tid)

    def lock(tid, done):
        impl.lock(self, tid, done)

    def lock_cont1(res):
        impl.lock_cont1(self, res)

    def lock_cont2(res):
        impl.lock_cont2(res)

    def commit(tid, ok):
        impl.commit(tid, ok)

    def get():
        return impl.get()

    def below():
        return impl.below(self)

class _Session(object):
    edit_config:        proc(actself: Session, diff: gdata.Node, done: action(value)->None) -> None
    edit_config_cont:   proc(res: value) -> None
    configure:          proc(tid: str, diff_per_source: dict[str,gdata.Node]) -> None
    apply:              proc(tid: str) -> value
    lock:               proc(actself: Session, tid: str, done: action(value)->None) -> None
    lock_cont1:         proc(actself: Session, res: value) -> None
    lock_cont2:         proc(res: value) -> None
    commit:             proc(tid: str, ok: bool) -> None
    get:                proc() -> gdata.Node
    below:              proc(actself: Session) -> Session



def Layer(name: str, root: Node, lower: GenLayer):
    return GenLayer(_Layer(name, root, lower))

class _Layer(_GenLayer):
    name: str
    root: Node
    lower: GenLayer

    def __init__(self, name, root: Node, lower: GenLayer):
        self.name = name
        self.root = root
        self.lower = lower

    def newsession(self):
        return LayerSession(self.name, self.root, self.lower)


def Sink():
    return GenLayer(_Sink(SinkSession()))

class _Sink(_GenLayer):
    session: Session

    def __init__(self, session):
        self.session = session

    def newsession(self):
        return self.session


def LayerSession(name: str, rootnode: Node, lowerlayer: GenLayer):
    return Session(_LayerSession(name, rootnode.newtrans(), lowerlayer.newsession()))

class _LayerSession(_Session):
    root: Transaction
    lower: Session
    buf: dict[str, dict[str,gdata.Node]]
    exe_cont: ?action(value)->None
    fin_cont: ?action(value)->None
    tid: ?str

    def __init__(self, name: str, root: Transaction, lower: Session):
        self.name = name
        self.root = root
        self.lower = lower
        self.buf = {}
        self.exe_cont = None
        self.fin_cont = None
        self.tid = None

    # yield action
    def edit_config(self, actself, diff: gdata.Node, done):
        tid = 'tr_' + str(self)[-10:-1]
        #print('#### (Layer)', self.name, 'edit_config', tid)
        self.exe_cont = done
        self.configure(tid, {'_': diff})
        res = self.apply(tid)
        #print('   # (Layer) EXECUTE', tid, 'PREP RESULT', res)
        if isinstance(res, str) and res == 'Ok':
            self.lock(actself, tid, actself.edit_config_cont)       # yield await

    def edit_config_cont(self, res: value):
        exe_cont = self.exe_cont
        tid = self.tid
        #print('#### (Layer)', self.name, 'edit_config_cont', tid)
        if exe_cont is not None and tid is not None:
            self.commit(tid, isinstance(res, str) and res == 'Ok')
            #print('   # (Layer) EXECUTE', tid, 'DONE', res)
            exe_cont(res)
        self.exe_cont = None
        self.tid = None

    def configure(self, tid: str, diff_per_source: dict[str,gdata.Node]):
        if tid not in self.buf:
            self.buf[tid] = {}
        self.buf[tid].update(diff_per_source.items())

    def apply(self, tid):
        #print('#### (Layer)', self.name, 'apply', tid)
        res = self.root.configure(tid, self.buf[tid], self.lower)
        del self.buf[tid]
        if not isinstance(res, Exception):
            res = self.lower.apply(tid)
        rr = 'Ok' if isinstance(res, str) and res == 'Empty' else res
        #print('   # (Layer) APPLY', tid, 'RESULT', rr)
        return rr

    # yield action
    def lock(self, actself, tid: str, done: action(value) -> None):
        #print('#### (Layer)', self.name, 'lock', tid)
        self.tid = tid
        self.fin_cont = done
        self.root.lock(tid, self.lower, actself.lock_cont1)     # yield await

    def lock_cont1(self, actself, res: value):
        tid = self.tid
        #print('#### (Layer)', self.name, 'lock_cont1', tid)
        if tid is not None:
            if not isinstance(res, Exception):
                #print('   # (Layer) FINALIZE LOWER', tid)
                self.lower.lock(tid, actself.lock_cont2)        # yield await

    def lock_cont2(self, res: value):
        #print('#### (Layer)', self.name, 'lock_cont2')
        fin_cont = self.fin_cont
        if fin_cont is not None:
            self.fin_cont = None
            rr = 'Ok' if isinstance(res, str) and res == 'Empty' else res
            #print('   # (Layer) FINALIZE RESULT', rr)
            fin_cont(rr)

    def commit(self, tid, ok):
        #print('#### (Layer)', self.name, 'commit', tid)
        self.root.commit(tid, ok)
        self.lower.commit(tid, ok)

    def get(self):
        return self.root.get()

    def below(self, actself):
        return self.lower


def SinkSession():
    return Session(_SinkSession())

class _SinkSession(_Session):
    buf: dict[str, dict[str,gdata.Node]]
    cfg: dict[str,gdata.Node]

    def __init__(self):
        self.buf = {}
        self.cfg = {}

    # yield action
    def edit_config(self, actself, diff: gdata.Node, done):
        done('Ok')      # For now...

    def edit_config_cont(self, res: value):
        pass

    def configure(self, tid: str, diff_per_source: dict[str,gdata.Node]):
        #print('#### (Sink) configure', tid, 'sources', list(diff_per_source.keys()))
        if tid not in self.buf:
            self.buf[tid] = {}
        self.buf[tid].update(diff_per_source.items())

    def apply(self, tid):
        #print('#### (Sink) apply', tid)
        if tid in self.buf:
            self.cfg = patch(self.cfg, self.buf[tid])
            del self.buf[tid]
        return 'Ok'

    # yield action
    def lock(self, actself, tid: str, done: action(value) -> None):
        done('Ok')      # For now...

    def lock_cont1(self, actself, res: value):
        pass

    def lock_cont2(self, res: value):
        pass

    def commit(self, tid, ok):
        #print('#### (Sink) commit', tid)
        pass

    def get(self):
        merged = merge(self.cfg)
        return merged

    def below(self, actself):
        return actself


############## Containers ##################

def Container(elems={}):
    return Node(_Container(elems))

def ContainerTemplate(elems={}):
    return lambda: Node(_Container(elems))

class _Container(_Node):
    def __init__(self, elems: dict[str, Node]):
        self.elems = elems

    def newtrans(self):
        return ContainerTransaction(self.elems)

    def get(self):
        res = {}
        for tag,node in self.elems.items():
            res[tag] = node.get()
        return gdata.Container(res)

def ContainerTransaction(contents):
    return Transaction(_ContainerTransaction(contents))

class _ContainerTransaction(_Transaction):
    elems : dict[str, Transaction]
    accum : dict[str, value]
    state : ?YieldState

    def __init__(self, contents):
        self.elems = {}
        self.accum = {}
        self.state = None
        for key,node in contents.items():
            self.elems[key] = node.newtrans()

    def configure(self, tid, diff, out, key_ctx):
        #print('#### (Container) configure', tid)
        diff_by_child = transpose(diff)
        msgs = {}
        for child,subdiff in diff_by_child.items():
            #print('   # (Container) CONFIGURE CHILD', child)
            if child in self.elems:
                msgs[child] = async self.elems[child].configure(tid, subdiff, out, key_ctx)
        results = {}
        for child,msg in msgs.items():
            results[child] = await msg
            #print('   # (Container) RESULT CHILD', child, ':', results[child])
        return self._analyze(results)

    def _analyze(self, results):
        self.accum.update(results.items())
        for r in results.values():
            if isinstance(r, Exception):
                #print('   # (Container) RESULT:', r)
                return r
        #print('   # (Container) RESULT:', 'Ok')
        return 'Ok'

    # yield action
    def lock(self, actself, tid, out, done):
        #print('#### (Container) lock', tid)
        it = iter(sorted(self.accum.keys()))
        try:
            key = next(it)
            self.state = YieldState(it, key, tid, out, done)
            tr = self.elems[key]
            #print('   # (Container) LOCK CHILD', key)
            tr.lock(tid, out, actself.lock_cont)                    # yield await
        except StopIteration:
            #print('   # (Container) LOCK IMMEDIATELY DONE')
            done('Ok')

    proc def lock_cont (self, actself, res):
        state = self.state
        if state is not None:
            #print('   # (Container) LOCK', state.tid, 'CHILD', state.key, 'RESULT:', res)
            state.results[state.key] = res
            try:
                key = next(state.it)
                state.key = key
                tr = self.elems[key]
                #print('   # (Container) LOCK CHILD', key)
                tr.lock(state.tid, state.out, actself.lock_cont)
            except StopIteration:
                self.state = None
                #print('   # (Container) LOCK DONE')
                state.done(self._analyze(state.results))
        else:
            #print('#### (Container) lock_cont empty state!!!')
            pass

    proc def commit(self, tid, ok):
        #print('#### (Container) commit', tid)
        for child in self.accum.keys():
            #print('   # (Container) COMMIT CHILD', child)
            self.elems[child].commit(tid, ok)
        #print('   # (Container) COMMIT DONE')
        self.accum = {}

    def get(self):
        res = {}
        for tag,node in self.elems.items():
            res[tag] = node.get()
        return gdata.Container(res)


################# Lists ####################

def List(template):
    return Node(_List(template))

def ListTemplate(template):
    return lambda: Node(_List(template))

class _List(_Node):
    liststate: ListState

    def __init__(self, template):
        self.liststate = ListState(template)

    def newtrans(self):
        return ListTransaction(self.liststate)

    def get(self):
        return self.liststate.get()

actor ListState(template: proc() -> Node):
    var elems = {}
    var active = {}
    var provisional = set()

    def acquire(tid: str, keys: set[str]):
        active[tid] = keys
        new = keys - set(elems.keys())
        #print("==== acquire", tid, "keys:", keys, "new:", new, "provisional:", provisional)
        for k in new:
            elems[k] = template()
        provisional |= new
        result = {}
        for k in keys:
            result[k] = elems[k]
        return result

    def release(tid: str, ok: bool, deletes: set[str]):
        #print("==== release", tid, ok, "deletes:", deletes, "provisional:", provisional)
        if ok:
            provisional -= active[tid]
            provisional |= deletes
        del active[tid]
        if not active:
            #print("==== delete", provisional)
            for k in provisional:
                del elems[k]
            provisional = set()

    def get():
        res = []
        for key,node in elems.items():
            r = node.get()
            if isinstance(r, gdata.ListElement):
                res.append(r)
            elif isinstance(r, gdata.Inner):
                res.append(gdata.ListElement([key], r.children))
        return gdata.List(["name"], res)


class _ListTransaction(_Transaction):
    liststate : ListState
    elems : dict[str, Transaction]
    accum : dict[str, value]
    state : ?YieldState

    def __init__(self, liststate):
        self.liststate = liststate
        self.elems = {}
        self.accum = {}
        self.state = None

    def configure(self, tid, diff, out, key_ctx):
        #print('#### (List) configure', tid)
        diff_by_key = transpose(diff)
        keys = set(diff_by_key.keys())
        for key,node in self.liststate.acquire(tid, keys).items():
            self.elems[key] = node.newtrans()
        msgs = {}
        for key,subdiff in diff_by_key.items():
            #print('   # (List) CONFIGURE ELEMENT', key)
            msgs[key] = async self.elems[key].configure(tid, subdiff, out, key_ctx + [key])
        results = {}
        for key,msg in msgs.items():
            results[key] = await msg
            v = results[key]
            #print('   # (List) RESULT ELEMENT', key, ':', v)
        return self._analyze(results)

    def _analyze(self, results: dict[str,value]):
        self.accum.update(results.items())
        res = 'Empty'
        for key,r in results.items():
            if isinstance(r, Exception):
                #print('   # (List) RESULT:', r)
                return r
            if isinstance(r, str) and r == 'Ok':
                res = r
        #print('   # (List) RESULT:', res)
        return res

    # yield action
    def lock(self, actself, tid, out, done):
        #print('#### (List) lock', tid)
        it = iter(sorted(self.accum.keys()))
        try:
            key = next(it)
            self.state = YieldState(it, key, tid, out, done)
            tr = self.elems[key]
            #print('   # (List) LOCK ELEMENT', key)
            tr.lock(tid, out, actself.lock_cont)                        # yield await
        except StopIteration:
            #print('   # (List) LOCK IMMEDIATELY DONE')
            done('Ok')

    proc def lock_cont (self, actself, res):
        state = self.state
        if state is not None:
            #print('   # (List) LOCK', state.tid, 'ELEMENT', state.key, 'RESULT:', res)
            state.results[state.key] = res
            try:
                key = next(state.it)
                state.key = key
                tr = self.elems[key]
                #print('   # (List) LOCK ELEMENT', key)
                tr.lock(state.tid, state.out, actself.lock_cont)
            except StopIteration:
                self.state = None
                #print('   # (List) LOCK DONE')
                state.done(self._analyze(state.results))
        else:
            pass
            #print('#### (List) lock_cont empty state!!!')

    proc def commit(self, tid, ok):
        #print('#### (List) commit', tid)
        for key,tr in self.elems.items():
            #print('   # (List) COMMIT ELEMENT', key)
            tr.commit(tid, ok)
        deletes = set()
        for key,res in self.accum.items():
            if isinstance(res, str) and res == 'Empty':
                #print('   # (List) DELETE ELEMENT', key)
                deletes.add(key)
        self.liststate.release(tid, ok, deletes)
        self.elems = {}
        self.accum = {}

    proc def get(self):
        return self.liststate.get()

def ListTransaction(liststate:ListState):
    return Transaction(_ListTransaction(liststate))


################# Transform #####################

class _TransformTransactionBase(_Transaction):
    inputs: dict[str, dict[str, gdata.Node]]
    key_ctx: dict[str, list[str]]
    config: dict[str, gdata.Node]
    candidates: dict[str, (dict[str,gdata.Node], ?gdata.Node)]
    output: ?gdata.Node
    locker: ?str
    pending: list[(Transaction, str, Session, action(value)->None)]
    me: str

    compute : proc(tid: str, merged: gdata.Node, out: Session, key_ctx: list[str]) -> gdata.Node
    finalize : proc() -> None

    def __init__(self):
        self.inputs = {}
        self.key_ctx = {}
        self.config = {}
        self.candidates = {}
        self.output = None
        self.locker = None
        self.pending = []
        self.me = '(src_' + str(self)[-10:-1] + ')'

    def configure(self, tid, diff, out, key_ctx):
        #print('#### (Transform) configure', tid, self.me, key_ctx)
        if tid in self.inputs:
            self.inputs[tid].update(diff.items())
        else:
            self.inputs[tid] = diff
        self.key_ctx[tid] = key_ctx
        inp = self.inputs[tid]
        newconf = patch(self.config, inp)
        #for s,c in inp.items():
        #    print("# INPUT", tid, self.me, s, ":", c.prsrc())
        #for s,c in self.config.items():
        #    print("   # CURRENT", tid, self.me, s, ":", c.prsrc())
        #for s,c in newconf.items():
        #    print("   # NEWCONF", tid, self.me, s, ":", c.prsrc())
        if newconf == self.config:
            self.candidates[tid] = (self.config, self.output)
            #print('   # (Transform) NO CHANGE', tid, self.me)
            return 'Ok'
        elif newconf == {}:
            self.candidates[tid] = ({}, None)
            #print('   # (Transform) EMPTY RESULT', tid, self.me)
            return 'Empty'
        else:
            try:
                merged = assert_complete(merge(newconf))
                #print('   # (Transform) MERGED', tid, self.me, merged.prsrc())
#                assert self.validate(merged)
            except Exception as e:
                #print('   # (Transform) FAILURE', tid, self.me, e)
                return e
            else:
                newout = self.compute(tid, merged, out, key_ctx)
                self.candidates[tid] = (newconf, newout)
                #print('   # (Transform) OUTPUT', tid, self.me)
                return 'Ok'
        return 'Ok'

    # yield action
    def lock(self, actself, tid, out, done):                            # yield await
        #print("#### (Transform) lock", tid, self.me)
        locker = self.locker
        if locker is not None:
            if locker == tid:
                #print('   # (Transform) REDUNDANT LOCK', tid, self.me)
                done('Ok')
            else:
                #print('   # (Transform) SUSPENDING', tid, self.me)
                self.pending.append((actself, tid, out, done))          # suspend
            return
        self.locker = tid
        if tid not in self.candidates:
            inp = self.inputs.get_def(tid, {})
            key_ctx = self.key_ctx.get_def(tid, [])
            #print('   # (Transform) RE-CONFIGURING', tid, self.me)
            res = self.configure(tid, inp, out, key_ctx)
            done(res)
        else:
            #print('   # (Transform) LOCKING', tid, self.me)
            done('Ok' if self.candidates[tid].0 else 'Empty')

    def lock_cont (self, actself, res):
        pass

    def commit(self, tid, ok):
        #print("#### (Transform) commit", tid, self.me)
        self.inputs.pop(tid)
        if tid == self.locker:
            if ok and tid in self.candidates:
                config, output = self.candidates[tid]
                self.config = config
                self.output = output
                self.candidates = {}
                #print('   # (Transform) COMMITTING', tid, self.me)
                self.finalize()
            else:
                #print('   # (Transform) ABORTING', tid, self.me)
                self.candidates.pop(tid)
            self.locker = None
            if self.pending:
                (actself, tid2, out, done) = self.pending.pop(0)
                #print("   # (Transform) RESUMING", tid2, self.me)
                self.lock(actself, tid2, out, done)                     # resume
        else:
            #print('   # (Transform) IGNORING', tid, self.me)
            self.candidates.pop(tid)

    def finalize(self):
        pass

    def get(self):
        if self.config:
            return merge(self.config)
        else:
            return gdata.Absent()

def Transform(function, log_handler: ?logging.Handler=None):
    return Node(_Transform(function, log_handler))

def TransformTemplate(function, log_handler: ?logging.Handler=None):
    return lambda: Node(_Transform(function, log_handler))

class _Transform(_Node):
    def __init__(self, function, log_handler):
        self.transaction = TransformTransaction(function, log_handler)

    def newtrans(self):
        return self.transaction

    def get(self):
        return self.transaction.get()

def TransformTransaction(function, log_handler):
    return Transaction(_TransformTransaction(function, log_handler))

class _TransformTransaction(_TransformTransactionBase):
    function: TransformFunction

    def __init__(self, function: proc(?logging.Handler) -> TransformFunction, log_handler):
        _TransformTransactionBase.__init__(self)
        self.function = function(log_handler)

    def compute(self, tid, merged, out, key_ctx):
        newout = self.function.transform_wrapper(merged)
        res = difference(self.output, newout)
        out.configure(tid, {self.me: res})
        return newout

class TransformFunction(object):
    transform_wrapper: mut(gdata.Node) -> gdata.Node
    transform_xml: mut(xml.Node) -> gdata.Node
    logger: logging.Logger

    def __init__(self, log_handler: ?logging.Handler=None):
        self.logger = logging.Logger(log_handler)

    def transform_wrapper(self, cfg):
        return gdata.Absent()

    def transform_xml(self, cfg):
        return gdata.Absent()


################# RFSTransform ###################

def RFSTransform(function, dev_mgr: odev.DeviceManager, log_handler: ?logging.Handler=None):
    return Node(_RFSTransform(function, dev_mgr, log_handler))

def RFSTransformTemplate(function, dev_mgr: odev.DeviceManager, log_handler: ?logging.Handler=None):
    return lambda: Node(_RFSTransform(function, dev_mgr, log_handler))

class _RFSTransform(_Node):
    def __init__(self, function, dev_mgr, log_handler):
        self.transaction = RFSTransaction(function, dev_mgr, log_handler)

    def newtrans(self):
        return self.transaction

    def get(self):
        return self.transaction.get()

def RFSTransaction(function, dev_mgr, log_handler):
    return Transaction(_RFSTransaction(function, dev_mgr, log_handler))

class _RFSTransaction(_TransformTransactionBase):
    function: RFSFunction
    dev_mgr: odev.DeviceManager

    def __init__(self, function: proc(?logging.Handler) -> RFSFunction, dev_mgr: odev.DeviceManager, log_handler):
        _TransformTransactionBase.__init__(self)
        self.function = function(log_handler)
        self.dev_mgr = dev_mgr

    def compute(self, tid, merged, out, key_ctx):
        if len(key_ctx) < 2:
            raise ValueError("RFSTransform key_ctx length < 2")
        devname = key_ctx[-2]
        dev = self.dev_mgr.get(devname)
        modcap = dev.get_modules()
        newout = self.function.transform_wrapper(merged, DeviceInfo(devname, modcap))
        res = difference(self.output, newout)

        if isinstance(res, gdata.Root):
            embedded_res = gdata.Module({
                "devices": gdata.Container({
                    "device": gdata.List(["name"], [
                        gdata.ListElement([devname], {
                            "name": gdata.Leaf("str", devname),
                            "config": gdata.Container(res.children)
                        })
                    ])
                })
            }, ns="http://orchestron.org/yang/orchestron-device.yang")
            out.configure(tid, {self.me: embedded_res})

        return newout

class DeviceInfo(object):
    name: str
    modules: dict[str, odev.ModCap]

    def __init__(self, name: str, modules: dict[str, odev.ModCap] = {}):
        self.name = name
        self.modules = modules

class RFSFunction(object):
    transform_wrapper: mut(gdata.Node, DeviceInfo) -> gdata.Node
    transform_xml: mut(xml.Node, DeviceInfo) -> gdata.Node
    logger: logging.Logger

    def __init__(self, log_handler: ?logging.Handler=None):
        self.logger = logging.Logger(log_handler)

    def transform_wrapper(self, cfg, di):
        return gdata.Absent()

    def transform_xml(self, cfg, di):
        return gdata.Absent()


################# Device #####################

def Device(dev_mgr: odev.DeviceManager, log_handler: ?logging.Handler=None):
    return lambda: Node(_Device(dev_mgr, log_handler))

def DeviceTemplate(dev_mgr: odev.DeviceManager, log_handler: ?logging.Handler=None):
    return lambda: Node(_Device(dev_mgr, log_handler))

class _Device(_Node):
    def __init__(self, dev_mgr, log_handler):
        self.transaction = DeviceTransaction(dev_mgr, log_handler)

    def newtrans(self):
        return self.transaction

    def get(self):
        return self.transaction.get()

def DeviceTransaction(dev_mgr, log_handler):
    return Transaction(_DeviceTransaction(dev_mgr, log_handler))

class _DeviceTransaction(_TransformTransactionBase):
    dev_mgr: odev.DeviceManager
    logger: logging.Logger

    def __init__(self, dev_mgr: odev.DeviceManager, log_handler):
        _TransformTransactionBase.__init__(self)
        self.dev_mgr = dev_mgr
        self.logger = logging.Logger(log_handler)

    def compute(self, tid, merged, out, key_ctx):
        dmc = DeviceMetaConfig.from_gdata(merged)
        dev = self.dev_mgr.get(dmc.name)
        #print("Setting device meta-config", key_ctx)
        dev.set_meta_config(dmc)
        return merged

    def finalize(self):
        config = self.output
        pass


################# DeviceConfig #####################

def DeviceConfig(dev_mgr: odev.DeviceManager, log_handler: ?logging.Handler=None):
    return lambda: Node(_DeviceConfig(dev_mgr, log_handler))

def DeviceConfigTemplate(dev_mgr: odev.DeviceManager, log_handler: ?logging.Handler=None):
    return lambda: Node(_DeviceConfig(dev_mgr, log_handler))

class _DeviceConfig(_Node):
    def __init__(self, dev_mgr, log_handler):
        self.transaction = DeviceConfigTransaction(dev_mgr, log_handler)

    def newtrans(self):
        return self.transaction

    def get(self):
        return self.transaction.get()

def DeviceConfigTransaction(dev_mgr, log_handler):
    return Transaction(_DeviceConfigTransaction(dev_mgr, log_handler))

class _DeviceConfigTransaction(_TransformTransactionBase):
    dev_mgr: odev.DeviceManager
    logger: logging.Logger

    def __init__(self, dev_mgr: odev.DeviceManager, log_handler):
        _TransformTransactionBase.__init__(self)
        self.dev_mgr = dev_mgr
        self.logger = logging.Logger(log_handler)

    def compute(self, tid, merged, out, key_ctx):
        return merged

    def finalize(self):
        tree = self.output
        if tree is not None:
            if isinstance(tree, gdata.ListElement):
                name = tree.key_str()
                config = tree.children["config"]
                if isinstance(config, gdata.Container):
                    dev = self.dev_mgr.get(name)
                    dev_config = gdata.Root(config.children)
                    dev.edit_config(dev_config)
