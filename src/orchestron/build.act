import file
import yang
import ttt_gen
import ttt

class SysSpec(object):
    """Orchestration System specification

    This defines the core of the orchestration system, including the layers and
    supported device types
    """
    layers: list[Layer]
    def __init__(self, name: str, layers: list[Layer], device_types: list[DeviceType]):
        self.name = name
        self.layers = layers
        self.dev_types = device_types

    def gen_app(self, wfc: file.WriteFileCap, output_dir: str):
        tttsrc = "# WARNING WARNING WARNING WARNING WARNING\n"
        tttsrc += "# DO NOT MODIFY THIS FILE!! This file is generated!\n"
        tttsrc += "# WARNING WARNING WARNING WARNING WARNING\n\n"
        tttsrc += "import ttt\nimport yang.adata\nimport yang.gdata\n\n"
        imports = []
        tttsrc_getlayers = "def get_layers():\n    res = []\n"
        for idx, layer in enumerate(self.layers):
            print("Generating layer %d" % idx)
            name = "%s/%s/layers/y_%d.act" % (output_dir, self.name, idx)
    #        if idx == 0:
    #            name = "src/y_cfs.act"
    #        elif idx == len(layers) - 1:
    #            name = "src/y_rfs.act"

            wf_l = file.WriteFile(wfc, name)
            layer_src = yang.compile(layer.models)
            await async wf_l.write(layer_src.prdaclass().encode())
            await async wf_l.close()

            if idx < len(self.layers) - 1:
                tttsrc += "import %s.layers.t_%d\n" % (self.name, idx)
                print("Generating TTT for layer %d" % idx)

                t_name = "%s/%s/layers/t_%d.act" % (output_dir, self.name, idx)
                wf_tl = file.WriteFile(wfc, t_name)
                tttl_src = ttt_gen.ttt_prsrc(layer_src)
                await async wf_tl.write(tttl_src.encode())
                await async wf_tl.close()

                tttsrc_getlayers += "    res.append(respnet.layers.t_%d.get_ttt())\n" % idx

            if idx > 0:
                loose_name = "%s/%s/layers/y_%d_loose.act" % (output_dir, self.name, idx)
                wf_ll = file.WriteFile(wfc, loose_name)
                await async wf_ll.write(layer_src.prdaclass(loose=True).encode())
                await async wf_ll.close()


        tttsrc_getlayers += "    return res\n"
        tttsrc += "\n".join(list(set(imports))) + "\n\n"
        tttsrc += tttsrc_getlayers
        wf_appttt = file.WriteFile(wfc, "%s/%s/layers.act" % (output_dir, self.name))
        await async wf_appttt.write(tttsrc.encode())
        await async wf_appttt.close()


class Layer(object):
    """Orchestration System layer definition

    Contains a list of models that are part of the layer
    """
    def __init__(self, models: list[str], name: ?str=None):
        self.models = models
        self.name = name

class DeviceType(object):
    def __init__(self, name: str, models: list[str]):
        self.name = name
        self.models = []

    @staticmethod
    def from_dir(fc: file.FileCap, name: str, dir: str) -> DeviceType:
        rfc = file.ReadFileCap(fc)
        models = []
        fs = file.FS(fc)
        for f in fs.listdir(dir):
            if f.endswith(".yang"):
                rf = file.ReadFile(rfc, "%s/%s" % (dir, f))
                models.append(rf.read().decode())
        return DeviceType(name, models)
