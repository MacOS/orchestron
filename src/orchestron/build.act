import file
import yang
import yang.schema
import orchestron.ttt_gen as ttt_gen
import orchestron.yang as oyang


class SysSpec(object):
    """Orchestration System specification

    This defines the core of the orchestration system, including the layers and
    supported device types
    """
    layers: list[Layer]
    def __init__(self, name: str, layers: list[Layer], device_types: list[DeviceType]):
        self.name = name
        self.layers = layers + [Layer([oyang.device])]
        self.dev_types = device_types

    def gen_app(self, wfc: file.WriteFileCap, output_dir: str):
        tttsrc = "# WARNING WARNING WARNING WARNING WARNING\n"
        tttsrc += "# DO NOT MODIFY THIS FILE!! This file is generated!\n"
        tttsrc += "# WARNING WARNING WARNING WARNING WARNING\n\n"
        tttsrc += "import logging\n\n"
        tttsrc += "import orchestron.device as odev\n"
        tttsrc += "import orchestron.ttt as ttt\n"
        tttsrc += "import yang.adata\n"
        tttsrc += "import yang.gdata\n\n"
        imports = []
        tttsrc_getlayers = "def get_layers(dev_mgr: odev.DeviceManager, log_handler: logging.Handler):\n    res = []\n"
        for idx, layer in enumerate(self.layers):
            print("Generating layer %d" % idx)
            layer_name = layer.name
            lname = layer_name if layer_name is not None else str(idx)
            name = "%s/%s/layers/y_%s.act" % (output_dir, self.name, lname)
            modname = "%s.layers.y_%s" % (self.name, lname)
    #        if idx == 0:
    #            name = "src/y_cfs.act"
    #        elif idx == len(layers) - 1:
    #            name = "src/y_rfs.act"

            wf_l = file.WriteFile(wfc, name)
            layer_src = yang.compile(layer.models)
            await async wf_l.write(layer_src.prdaclass().encode())
            await async wf_l.close()

            tttsrc += "import %s.layers.t_%d\n" % (self.name, idx)
            print("Generating base & TTT for layer %d" % idx)

            # Not for the last layer
            out_layer_modname = None
            if idx < len(self.layers) - 1:
                out_layer_modname = "%s.layers.y_%d_loose" % (self.name, idx+1)

            tttl = ttt_gen.ttt_prsrc(layer_src, modname, out_layer_modname)

            base_name = "%s/%s/layers/base_%d.act" % (output_dir, self.name, idx)
            wf_bl = file.WriteFile(wfc, base_name)
            await async wf_bl.write(tttl.base.encode())
            await async wf_bl.close()

            t_name = "%s/%s/layers/t_%d.act" % (output_dir, self.name, idx)
            wf_tl = file.WriteFile(wfc, t_name)
            await async wf_tl.write(tttl.ttt.encode())
            await async wf_tl.close()

            tttsrc_getlayers += "    res.append(%s.layers.t_%d.get_ttt(dev_mgr, log_handler))\n" % (self.name, idx)

            if idx > 0:
                loose_name = "%s/%s/layers/y_%d_loose.act" % (output_dir, self.name, idx)
                wf_ll = file.WriteFile(wfc, loose_name)
                await async wf_ll.write(layer_src.prdaclass(loose=True).encode())
                await async wf_ll.close()

        for dev_type in self.dev_types:
            print("Generating device type %s" % dev_type.name)
            for idx, model in enumerate(dev_type.models):
                print("Generating model %d" % idx)
            dev_tree = yang.compile(dev_type.models)
            name = "%s/%s/devices/%s.act" % (output_dir, self.name, dev_type.name)
            wf_dt = file.WriteFile(wfc, name)
            await async wf_dt.write(dev_tree.prdaclass(gen_json=False).encode())
            await async wf_dt.close()

        tttsrc_getlayers += "    return res\n"
        tttsrc += "\n".join(list(set(imports))) + "\n\n"
        tttsrc += tttsrc_getlayers
        wf_appttt = file.WriteFile(wfc, "%s/%s/layers.act" % (output_dir, self.name))
        await async wf_appttt.write(tttsrc.encode())
        await async wf_appttt.close()


class Layer(object):
    """Orchestration System layer definition

    Contains a list of models that are part of the layer
    """
    def __init__(self, models: list[str], name: ?str=None):
        self.models = models
        self.name = name

class DeviceType(object):
    def __init__(self, name: str, models: list[str]):
        self.name = name
        self.models = models

    @staticmethod
    def from_dir(fc: file.FileCap, name: str, dir: str) -> DeviceType:
        rfc = file.ReadFileCap(fc)
        models = []
        fs = file.FS(fc)
        for f in fs.listdir(dir):
            if f.endswith(".yang"):
                rf = file.ReadFile(rfc, "%s/%s" % (dir, f))
                models.append(rf.read().decode())
        return DeviceType(name, models)
