import file
import re
import yang
import yang.schema
import orchestron.ttt_gen as ttt_gen
import orchestron.yang as oyang
import transform_unions
import yang.parser


def _maybe_write_file(fc: file.FileCap, name: str, content: str) -> bool:
    """Write new content to a file if the content is different from existing content"""
    rfc = file.ReadFileCap(fc)
    wfc = file.WriteFileCap(fc)
    old_content = ""
    try:
        rf = file.ReadFile(rfc, name)
        old_content = rf.read().decode()
    except FileNotFoundError:
        pass
    if old_content != content:
        wf = file.WriteFile(wfc, name)
        await async wf.write(content.encode())
        await async wf.close()
        return True
    return False

class SysSpec(object):
    """Orchestration System specification

    This defines the core of the orchestration system, including the layers and
    supported device types
    """
    layers: list[Layer]
    def __init__(self, name: str, layers: list[Layer], device_types: list[DeviceType]):
        self.name = name
        self.layers = layers + [Layer([oyang.device])]
        self.dev_types = {}
        for dev_type in device_types:
            self.dev_types[dev_type.name] = dev_type

    def gen_app(self, fc: file.FileCap, output_dir: str):
        tttsrc = "# WARNING WARNING WARNING WARNING WARNING\n"
        tttsrc += "# DO NOT MODIFY THIS FILE!! This file is generated!\n"
        tttsrc += "# WARNING WARNING WARNING WARNING WARNING\n\n"
        tttsrc += "import logging\n\n"
        tttsrc += "import orchestron.device as odev\n"
        tttsrc += "import orchestron.ttt as ttt\n"
        tttsrc += "import yang.adata\n"
        tttsrc += "import yang.gdata\n\n"
        imports = []
        tttsrc_getlayers = "def get_layers(dev_mgr: odev.DeviceManager, log_handler: ?logging.Handler=None):\n    res = "
        tttsrc_tojson = "def to_json(idx):\n    "
        for idx, layer in enumerate(self.layers):
            print("Generating layer %d" % idx)
            layer_name = layer.name
            lname = layer_name if layer_name is not None else str(idx)
            name = "%s/%s/layers/y_%s.act" % (output_dir, self.name, lname)
            modname = "%s.layers.y_%s" % (self.name, lname)
            tttsrc += "import %s\n" % modname
    #        if idx == 0:
    #            name = "src/y_cfs.act"
    #        elif idx == len(layers) - 1:
    #            name = "src/y_rfs.act"

            layer_src = yang.compile(layer.models)
            layer_adata = layer_src.prdaclass()
            if _maybe_write_file(fc, name, layer_adata):
                print("+ Layer %d adata changed" % idx)
            else:
                print("+ Layer %d adata unchanged" % idx)

            tttsrc += "import %s.layers.t_%d\n" % (self.name, idx)
            print("Generating base & TTT(?) for layer %d" % idx)

            # Not for the last layer
            out_layer_modname = None
            if idx < len(self.layers) - 1:
                out_layer_modname = "%s.layers.y_%d_loose" % (self.name, idx+1)

            tttl = ttt_gen.ttt_prsrc(layer_src, modname, out_layer_modname)

            base_name = "%s/%s/layers/base_%d.act" % (output_dir, self.name, idx)
            if _maybe_write_file(fc, base_name, tttl.base):
                print("+ Layer %d base changed" % idx)
            else:
                print("+ Layer %d base unchanged" % idx)

            t_name = "%s/%s/layers/t_%d.act" % (output_dir, self.name, idx)
            if _maybe_write_file(fc, t_name, tttl.ttt):
                print("+ Layer %d TTT(?) changed" % idx)
            else:
                print("+ Layer %d TTT(?) unchanged" % idx)

            indent = "" if idx == 0 else "          "
            tttsrc_getlayers += "%sttt.Layer('%s', %s.layers.t_%d.get_ttt(dev_mgr, log_handler),\n" % (indent, lname, self.name, idx)
            tttsrc_tojson += "if idx == %d:\n        return %s.to_json\n    el" % (idx, modname)

            loose_name = "%s/%s/layers/y_%d_loose.act" % (output_dir, self.name, idx)
            if _maybe_write_file(fc, loose_name, layer_src.prdaclass(loose=True)):
                print("+ Layer %d loose adata changed" % idx)
            else:
                print("+ Layer %d loose adata unchanged" % idx)

        syssrc = ""
        syssrc_devtypes = ""
        for dev_type in self.dev_types.values():
            print("Generating device type %s" % dev_type.name)
            for idx, model in enumerate(dev_type.models):
                print("Generating model %d" % idx)
            dev_tree = yang.compile(dev_type.models)
            dev_tree_adata = dev_tree.prdaclass(gen_json=False, loose=True)
            name = "%s/%s/devices/%s.act" % (output_dir, self.name, dev_type.name)
            if _maybe_write_file(fc, name, dev_tree_adata):
                print("+ Device type %s adata changed" % dev_type.name)
            else:
                print("+ Device type %s adata unchanged" % dev_type.name)

            syssrc += "import %s.devices.%s\n" % (self.name, dev_type.name)
            syssrc_devtypes += "    \"%s\": %s.devices.%s\n" % (dev_type.name, self.name, dev_type.name)
        syssrc += "device_types = {\n"
        syssrc += syssrc_devtypes
        syssrc += "}\n"
        if _maybe_write_file(fc, "%s/%s/sysspec.act" % (output_dir, self.name), syssrc):
            print("+ Sys spec changed")
        else:
            print("+ Sys spec unchanged")

        print("Generating app layers.act")
        tttsrc_getlayers += "          None%s\n    return res\n" % (")" * len(self.layers))
        tttsrc_tojson += "se:\n        raise IndexError(idx)\n"
        tttsrc += "\n".join(list(set(imports))) + "\n\n"
        tttsrc += tttsrc_getlayers + "\n" + tttsrc_tojson
        if _maybe_write_file(fc, "%s/%s/layers.act" % (output_dir, self.name), tttsrc):
            print("+ App layers.act changed")
        else:
            print("+ App layers.act unchanged")

class SchemaTransformChain:
    """SchemaTransform chain to be applied to a YANG module

    Use the SchemaTransformChain to apply a series of schema transforms to a
    YANG module. Note that this is a temporary solution until we come up with a
    better design for SysSpec using a build graph.

    The module_pattern attribute is a regex pattern that may match multiple
    modules. The input module names must end in .yang.orig and be placed in the
    search directory. After transforming the outputs are saved in a module
    without the .orig suffix.
    """
    def __init__(self, module_pattern: str, transforms: list[SchemaTransform]):
        self.module_pattern = module_pattern
        self.transforms = transforms

    def apply(self, yang_text: str) -> str:
        for t in self.transforms:
            yang_text = t.apply(yang_text)
        return yang_text

    def matches(self, module: str) -> bool:
        m = re.match(self.module_pattern, module)
        return True if m is not None else False

class SchemaTransform:
    """SchemaTransform to be applied to a YANG module
    """
    name: str

    # The apply method effect is incorrecty inferred as mut. It is true that
    # the implementations call mut functions, but these effects do not leak
    # outside of the apply() method.
    def apply(self, yang_text: str) -> str:
        raise NotImplementedError()

class SchemaTransformNoComments(SchemaTransform):
    def __init__(self):
        self.name = "no_comments"

    def apply(self, yang_text: str) -> str:
        y = yang.parser.parse(yang_text)
        return y.pryang()

class SchemaTransformUnions(SchemaTransform):
    def __init__(self):
        self.name = "rewrite_unions"

    def apply(self, yang_text: str) -> str:
        n = yang.schema_from_src(yang_text)
        transform_unions.rewrite_unions(n)
        return n.to_statement().pryang()

class Layer(object):
    """Orchestration System layer definition

    Contains a list of models that are part of the layer
    """
    def __init__(self, models: list[str], name: ?str=None):
        self.models = models
        self.name = name

    @staticmethod
    def from_dir(fc: file.FileCap, dir: str, name: ?str=None) -> Layer:
        """Create a Layer from YANG models in a directory

        This method simply loads all .yang files from the specified directory
        to create a Layer.
        """
        rfc = file.ReadFileCap(fc)
        fs = file.FS(fc)
        models = []

        for f in fs.listdir(dir):
            if f.endswith(".yang"):
                rf = file.ReadFile(rfc, "%s/%s" % (dir, f))
                models.append(rf.read().decode())
        return Layer(models, name)

def apply_schema_transforms_to_dir(fc: file.FileCap, dir: str, transforms: list[SchemaTransformChain]=[]) -> None:
    """Apply schema transformations to YANG files in a directory.

    This function processes files in the specified directory using the provided
    transform chains. Files that match a transform chain's pattern will be
    processed and the transformed output will be written back to the same
    directory without the .orig suffix.
    """
    rfc = file.ReadFileCap(fc)
    wfc = file.WriteFileCap(fc)
    fs = file.FS(fc)

    for in_name in fs.listdir(dir):
        yang_text = None
        for tc in transforms:
            if not tc.matches(in_name):
                continue
            if yang_text is None:
                rf = file.ReadFile(rfc, file.join_path([dir, in_name]))
                yang_text = rf.read().decode()
            if yang_text is not None:
                for t in tc.transforms:
                    print("Applying transform %s to %s" % (t.name, in_name))
                    yang_text = t.apply(yang_text)
        if yang_text is not None:
            # Remove the .orig suffix
            out_name = in_name[:-5]
            print("Writing %s" % out_name)
            wf = file.WriteFile(wfc, file.join_path([dir, out_name]))
            await async wf.write(yang_text.encode())

class DeviceType(object):
    def __init__(self, name: str, models: list[str]):
        self.name = name
        self.models = models

    @staticmethod
    def from_dir(fc: file.FileCap, name: str, dir: str) -> DeviceType:
        """Create a DeviceType DTO from YANG models in a directory

        This method simply loads all .yang files from the specified directory
        to create a DeviceType.
        """
        rfc = file.ReadFileCap(fc)
        fs = file.FS(fc)
        models = []

        for f in fs.listdir(dir):
            if f.endswith(".yang"):
                rf = file.ReadFile(rfc, "%s/%s" % (dir, f))
                models.append(rf.read().decode())
        return DeviceType(name, models)
