import testing
import logging

import orchestron.ttt as ttt
import yang.gdata as gdata
import yang.adata
import orchestron.device as odev
from orchestron.device_meta_config import \
    orchestron_rfs__device_entry as DeviceMetaConfig, \
    orchestron_rfs__device__credentials as Credentials, \
    orchestron_rfs__device__mock as Mock

########################

actor reconf(t: testing.AsyncT):
    dev_mgr = odev.DeviceManager(log_handler=t.log_handler)

    def reconf_cb(dev):
        #print("Reconfiguring", dev)
        t.success()
        
    dmc = DeviceMetaConfig("k1", Credentials("admin", "admin"), mock=Mock(["cisco-ios-xr"]))
    dev_mgr.on_reconf(reconf_cb)
    dev_mgr.get("k1").set_dmc(dmc)


########################

cfg2 = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "k1"),
        "config": gdata.Container({
            "val": gdata.Leaf("string", "one")
        })
    }),
    gdata.Container({
        "name": gdata.Leaf("string", "k2"),
        "config": gdata.Container({
            "val": gdata.Leaf("string", "two")
        })
    })
])

actor reconf2(t: testing.AsyncT):
    dev_mgr = odev.DeviceManager(log_handler=t.log_handler)
    stack = ttt.Layer("devices", ttt.List(ttt.DeviceConfig(dev_mgr), ["name"], ["string"]), None)
    
    var devs = set()
    
    def reconf_cb(dev):
        devs.add(dev)
        #print("Reconfiguring", dev)
        if devs == {"k1", "k2"}:
            t.success()
        
    dev_mgr.on_reconf(reconf_cb)
    sess = stack.newsession()
    
    def cont1(_r):
        dmc = DeviceMetaConfig("k1", Credentials("admin", "admin"), mock=Mock(["cisco-ios-xr"]))
        dev_mgr.get("k1").set_dmc(dmc)
        dev_mgr.get("k2").set_dmc(dmc)
    
    sess.edit_config(cfg2, cont1)


########################

class Fun(ttt.RFSFunction):
    def transform_wrapper(self, cfg, device_info, memory, dynstate):
        return (gdata.Container(cfg.children), memory)

cfg3 = gdata.Container({
    "rfs": gdata.List(["name"], [
        gdata.Container({
            "name": gdata.Leaf("string", "k1"),
            "base": gdata.List(["id"], [
                gdata.Container({
                    "id": gdata.Leaf("string", "A"),
                    "val": gdata.Leaf("string", "one")
                })
            ])
        }),
        gdata.Container({
            "name": gdata.Leaf("string", "k2"),
            "base": gdata.List(["id"], [
                gdata.Container({
                    "id": gdata.Leaf("string", "A"),
                    "val": gdata.Leaf("string", "two")
                })
            ])
        })
    ])
})

def rfs_for_device(dev):
    return gdata.Container({
        'rfs': gdata.List(["name"], [
            gdata.Container({
                "name": gdata.Leaf("string", dev)
            })
        ])
    })

actor complete(t: testing.AsyncT):
    dev_mgr = odev.DeviceManager(log_handler=t.log_handler)
    stack = ttt.Layer("rfs", ttt.Container({"rfs": ttt.List(ttt.Container({"base": ttt.List(ttt.RFSTransform(Fun, dev_mgr), ["id"], ["string"])}), ["name"], ["string"])}),
            ttt.Layer("devices", ttt.Container({"devices": ttt.Container({"device": ttt.List(ttt.DeviceConfig(dev_mgr), ["name"], ["string"])})}),
            None))

    def reconf_cb(dev):
        cfg = rfs_for_device(dev)
        stack.edit_config(cfg, force=True)
        
    dev_mgr.on_reconf(reconf_cb)
    
    def cont1(_r):
        dmc1 = DeviceMetaConfig("k1", Credentials("admin", "admin"), mock=Mock(["cisco-ios-xr"]))
        dmc2 = DeviceMetaConfig("k2", Credentials("admin", "admin"), mock=Mock(["cisco-ios-xr"]))
        k1 = dev_mgr.get("k1").set_dmc(dmc1)
        k2 = dev_mgr.get("k2").set_dmc(dmc2)
    
    def complete_cb(_r):
        t.success()
        
    sess = stack.newsession()
    sess.edit_config(cfg3, cont1, complete_cb)


########################

