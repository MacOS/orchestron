import testing

import yang
import orchestron.ttt_gen as ttt_gen
import orchestron.yang as oyang

ys_cfs = r"""module foo {
  yang-version "1.1";
  namespace "http://example.com/foo";
  prefix "foo";
  container c1 {
    list foo {
      key name;

      leaf name {
        type string;
      }

      list bar {
        key name;

        orchestron:transform respnet.cfs.Foobar;

        leaf name {
          type string;
        }
      }
    }
  }
}
"""

def _test_ttt_gen_cfs_base():
    y = yang.compile([ys_cfs])
    r = ttt_gen.ttt_prsrc(y, 'respnet.layers.y_0', 'respnet.layers.y_1_loose')
    return r.base

def _test_ttt_gen_cfs_ttt():
    y = yang.compile([ys_cfs])
    r = ttt_gen.ttt_prsrc(y, 'respnet.layers.y_0', 'respnet.layers.y_1_loose')
    return r.ttt

ys_rfs = r"""module foo {
  yang-version "1.1";
  namespace "http://example.com/foo";
  prefix "foo";
  import orchestron-rfs {
    prefix orfs;
  }
  augment /orfs:rfs {
    list backbone-interface {
      key name;

      orchestron:rfs-transform respnet.rfs.BBInterface;

      leaf name {
        type string;
      }
    }
  }
}
"""

def _test_ttt_gen_rfs_base():
    y = yang.compile([oyang.rfs, oyang.ietf_inet_types, ys_rfs])
    r = ttt_gen.ttt_prsrc(y, 'respnet.layers.y_1', '')
    return r.base

def _test_ttt_gen_rfs_ttt():
    y = yang.compile([oyang.rfs, oyang.ietf_inet_types, ys_rfs])
    r = ttt_gen.ttt_prsrc(y, 'respnet.layers.y_1', '')
    return r.ttt

def _test_odev() -> str:
    y = yang.compile([oyang.device])
    r = ttt_gen.ttt_prsrc(y, '', '')
    return r.ttt
