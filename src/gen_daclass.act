import file

import yang.parser
import yang.schema
import ttt_gen
import ttt

netinfra_yang = """module netinfra {
  yang-version "1.1";
  namespace "http://example.com/netinfra";
  prefix "netinfra";
  description "Network Infrastructure";
  revision 2019-01-01 {
    description "test revision";
    reference "ref1";
  }

  container netinfra {
    description "Network infrastructure";
    list routers {
      key name;

      orchestron:transform respnet.CfsRouter;

      leaf name {
        type string;
      }
      leaf id {
        type string;
        description "router id";
      }
      leaf role {
        type string;
      }
    }
    list backbonelink {
      key "left-router left-interface right-router right-interface";

      orchestron:transform respnet.CfsBBLink;

      leaf left-router {
        type string;
      }
      leaf left-interface {
        type string;
      }
      leaf right-router {
        type string;
      }
      leaf right-interface {
        type string;
      }
    }
  }
}
"""

l3vpn_yang = """module l3vpn {
  yang-version "1.1";
  namespace "http://example.com/l3vpn";
  prefix "l3vpn";
  description "L3VPN service";
  revision 2019-01-01 {
    description "funky revision";
    reference "ref1";
  }

  container l3vpn {
    description "L3VPN";
    leaf this {
      type string;
    }
    leaf that {
      type string;
    }
  }
}
"""

nodes_yang = """module nodes {
  yang-version "1.1";
  namespace "http://example.com/nodes";
  prefix "nodes";
  description "Nodes services";
  revision 2019-01-01 {
    description "funky revision";
    reference "ref1";
  }

  container nodes {
    list routers {
      key name;
      leaf name {
        type string;
      }

      leaf id {
        type string;
      }

      leaf ipv4address {
        type string;
      }

      leaf ipv6address {
        type string;
      }
      leaf corefoo {
        type string;
      }
      list backboneinterface {
        key name;
        leaf name {
          type string;
        }
        container remote {
          leaf device {
            type string;
            mandatory true;
          }
          leaf interface {
            type string;
            mandatory true;
          }
        }
      }
    }
  }
}
"""


actor main(env):
    fc = file.FileCap(env.cap)
    wfc = file.WriteFileCap(fc)

    cfs_netinfra = yang.schema.stmt_to_snode(yang.parser.parse(netinfra_yang)).to_dnode()
    cfs_l3vpn = yang.schema.stmt_to_snode(yang.parser.parse(l3vpn_yang)).to_dnode()

    rfs_netinfra = yang.schema.stmt_to_snode(yang.parser.parse(nodes_yang)).to_dnode()
    if isinstance(cfs_netinfra, yang.schema.DModule) and isinstance(cfs_l3vpn, yang.schema.DModule) and isinstance(rfs_netinfra, yang.schema.DModule):
        cfs_root = yang.schema.DRoot([cfs_netinfra, cfs_l3vpn])
        rfs_root = yang.schema.DRoot([rfs_netinfra])

        wf_cfs = file.WriteFile(wfc, "src/y_cfs.act")
        await async wf_cfs.write(cfs_root.prdaclass().encode())
        await async wf_cfs.close()

        wf_rfsl = file.WriteFile(wfc, "src/y_rfs_loose.act")
        await async wf_rfsl.write(rfs_root.prdaclass(loose=True).encode())
        await async wf_rfsl.close()

        wf_rfs = file.WriteFile(wfc, "src/y_rfs.act")
        await async wf_rfs.write(rfs_root.prdaclass().encode())
        await async wf_rfs.close()

        #wf_appttt = file.WriteFile(wfc, "src/appttt.act")
        #a = ttt_gen.dschema_to_tttsrc(cfs_root)
        #await async wf_appttt.write(a.encode())
        #await async wf_appttt.close()

    env.exit(0)
