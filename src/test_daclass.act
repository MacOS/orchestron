
import xml
import yang.gdata
from y_cfs import root as cfs_root
from y_cfs import netinfra__netinfra__routers_entry
from y_rfs import root as rfs_root

nb_input = """
<data>
    <netinfra xmlns="http://example.com/netinfra">
        <routers>
            <name>STO-CORE-1</name>
            <id>4</id>
        </routers>
        <routers>
            <name>AMS-CORE-1</name>
            <id>8</id>
        </routers>
    </netinfra>
    <l3vpn>
    </l3vpn>
</data>
"""

nb_input2 = """
<data>
    <netinfra xmlns="http://example.com/netinfra">
        <routers>
            <name>STO-CORE-1</name>
            <id>4</id>
        </routers>
        <routers>
            <name>AMS-CORE-1</name>
            <id>8</id>
        </routers>
        <routers>
            <name>FRA-CORE-1</name>
            <id>2</id>
        </routers>
    </netinfra>
    <l3vpn>
    </l3vpn>
</data>
"""

def cfs_router_service(service: netinfra__netinfra__routers_entry, otree: rfs_root) -> rfs_root:
    print("CFS router service running", service.name, service.id)
    router = otree.nodes.routers.create(service.name)
    router.id = service.id
    sid = service.id
    router.ipv4address = "10.0.1.%s/32" % sid if sid is not None else ""
    #router.ipv6address = "2001:db8:0:1::%s/128" % sid if sid is not None else ""
    return otree

#def rfs_nodes_router_service(service: nodes__nodes__routers_entry, otree: dev_root) -> dev_root:
#    print("FFS router service running", service.name, service.id, service.ipv4address, service.ipv6address)
#    return otree


def foo():
    d = cfs_root.from_xml(xml.decode(nb_input))
    otree = rfs_root()
    # This should be done magically
    sos = []
    for s in d.netinfra.routers.elements:
        sos.append(cfs_router_service(s, rfs_root()))
    so = sos[0].to_gdata()
    for s in sos[1:]:
        so = yang.gdata.merge(so, s.to_gdata())
    print(so.to_xmlstr())
    #rfs_root = rfs_root_strict.from_gdata(so)



#def service1(input: netinfra__netinfra__routers__entry):
#    root = cfs_root()
#    r = root.netinfra.routers.create("STO-CORE-1")
#    r.id = 4
#
#    return root.to_gdata()

#def service2():
#    root = cfs_root()
#
#    e1 = root.c1.list1.create("shit")
#    e1.l5 = "set by service2"
#
#    return root.to_gdata()

#def service3():
#    root = y_testy.y_testy(
#        c1 = y_testy.y_testy_c1(
#            l2 = "set by service3",
#            c2 = y_testy.y_testy_c1_c2(
#                l4 = "set by service3"
#            )
#        ),
#        list1 = [
#            y_testy.y_testy_list1_element(....)
#        ]
#
#    )
#    return root.to_gdata()

#def foo():
#    root = cfs_root()
#    root.c1.l1 = "a leaf written by service1"
#    root.c1.c2.l3 = "also set by service1"
#    e_foo = root.c1.list1.create("foo")
#    e_foo.l5 = "hiaho"
#
#    print(root.to_gdata().to_xmlstr())
#
#    gd = root.to_gdata()
#    print(gd)
#    a = cfs_root.from_gdata(gd)
#    print(a.c1.l1)
#    print(a.c1.c2.l3)
#
#    x = "<data>%s</data>" % a.to_gdata().to_xmlstr()
#    print("XML str output:")
#    print(x)
#    xml_node = xml.decode(x)
#    print("decoded XML:")
#    print(xml_node)
#    xin = cfs_root.from_xml(xml_node)
#    print("another roundtrip:")
#    print(xin.to_gdata().to_xmlstr())



actor main(env):
    foo()
#    data1 = service1()
#    data2 = service2()
#    merged_config = yang.data.merge(data1, data2)
#    y_testy.
#    print(merged_config.to_xmlstr())
    env.exit(0)
