# SPDX-FileCopyrightText: 2025 Deutsche Telekom AG
# SPDX-License-Identifier: BSD-3-Clause
# License-Filename: LICENSES/BSD-3-Clause.txt


import testing
import logging

import orchestron.ttt as ttt
#import orchestron.gdata as gdata
import yang.gdata as gdata


cfg1 = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "k1"),
        "n1": gdata.Leaf("int", 1),
        "n2": gdata.Leaf("int", 2)
    }),
    gdata.Container({
        "name": gdata.Leaf("string", "k2"),
        "n1": gdata.Leaf("int", 4)
    })
])

cfg2 = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "k1"),
        "n2": gdata.Leaf("int", 2),
        "n3": gdata.Leaf("int", 3)
    }),
    gdata.Container({
        "name": gdata.Leaf("string", "k3"),
        "n1": gdata.Leaf("int", 1),
        "n3": gdata.Leaf("int", 3)
    })
])

out1 = gdata.Container({
    'devices': gdata.List(["id"], [
        gdata.Container({
            "id": gdata.Leaf("string", "k1"),
            "n1": gdata.Leaf("int", 1),
            "n2": gdata.Leaf("int", 2)
        }),
        gdata.Container({
            "id": gdata.Leaf("string", "k2"),
            "n1": gdata.Leaf("int", 4)
        })
    ])
})

out1_2 = gdata.Container({
    'devices': gdata.List(["id"], [
        gdata.Container({
            "id": gdata.Leaf("string", "k1"),
            "n1": gdata.Leaf("int", 1),
            "n2": gdata.Leaf("int", 2),
            "n3": gdata.Leaf("int", 3)
        }),
        gdata.Container({
            "id": gdata.Leaf("string", "k3"),
            "n1": gdata.Leaf("int", 1),
            "n3": gdata.Leaf("int", 3)
        }),
        gdata.Container({
            "id": gdata.Leaf("string", "k2"),
            "n1": gdata.Leaf("int", 4)
        })
    ])
})

class TransF(ttt.TransformFunction):
    def transform_wrapper(self, cfg, memory, dynstate):
        """Simple transform that copies inputs to ouputs (sans keys)

        The input list layer is keyed on "name", the output on "id". This
        transform copies all child elements to the next layer, while renaming
        the key.
        """
        if isinstance(cfg, gdata.Container):
            # Copy all child nodes
            out = gdata.Container(dict(cfg.children.items()))
            # "Rename" the key leaf
            out.children["id"] = gdata.Leaf("string", cfg.get_leaf("name").val)
            del out.children["name"]
            return gdata.Container({
                'devices': gdata.List(["id"], [
                    out
                ])
            }), None
        else:
            return gdata.Container({}), None


########################

actor basic_output(t: testing.AsyncT):
    out = ttt.Sink().newsession()
    tlist = ttt.List(ttt.Transform(TransF), ["name"], ["string"]) ([], None)
    t1 = tlist.newtrans()

    t1.configure("1", {'srcA': cfg1}, out)

    def cont1(res: value):
        t1.commit("1", True)
        t1.get()
        out.apply("1")
        out.lock("1", cont2)

    def cont2(res: value):
        out.commit("1", True)
        r = out.get()
        testing.assertEqual(r, out1)
        t.success()

    t1.lock("1", out, cont1)

actor layered_commit(t: testing.AsyncT):
    stack = ttt.Layer("top", ttt.List(ttt.Transform(TransF), ["name"], ["string"]), ttt.Sink())

    sess = stack.newsession()

    def cont1(_r: value):
        r0 = sess.get()
        testing.assertEqual(r0, cfg1)
        r1 = sess.below().get()
        testing.assertEqual(r1, out1)
        t.success()

    sess.edit_config(cfg1, cont1)

actor simultaneous_commit(t: testing.AsyncT):
    stack = ttt.Layer("top", ttt.List(ttt.Transform(TransF), ["name"], ["string"]), ttt.Sink())

    sess1 = stack.newsession()
    sess2 = stack.newsession()

    var acks = 0

    def cont(_r: value):
        acks += 1
        if acks == 2:
            r2 = sess2.below().get()
            r1 = sess1.below().get()
            testing.assertEqual(r1, out1_2)
            t.success()

    sess1.edit_config(cfg1, cont)
    sess2.edit_config(cfg2, cont)

########################

cfg3 = gdata.Container({
    "left": gdata.Container({
        "a": gdata.Leaf("int", 1)
    }),
    "right": gdata.Container({
        "a": gdata.Leaf("int", 2)
    })
})

out3 = gdata.Container({
    'devices': gdata.List(["id"], [
        gdata.Container({
            "id": gdata.Leaf("int", 1),
            "val": gdata.Leaf("int", 1)
        }),
        gdata.Container({
            "id": gdata.Leaf("int", 2),
            "val": gdata.Leaf("int", 2)
        })
    ])
})

class WriteDev(ttt.TransformFunction):
    def transform_wrapper(self, cfg: gdata.Node, memory, dynstate):
        i = cfg.get_int("a")
        return gdata.Container({
            'devices': gdata.List(["id"], [
                gdata.Container({
                    "id": gdata.Leaf("int", i),
                    "val": gdata.Leaf("int", i)
                })
            ])
        }), None

actor diamond_commit(t: testing.AsyncT):
    stack = ttt.Layer("top",
        ttt.Container({
            "left": ttt.Transform(WriteDev),
            "right": ttt.Transform(WriteDev)
        }),
        ttt.Sink())

    sess = stack.newsession()

    def cont(_r: value):
        r = sess.below().get()
        testing.assertEqual(r, out3)
        t.success()

    sess.edit_config(cfg3, cont)

########################

cfg4 = gdata.Container({
    "ll": gdata.Leaf("int", 1),
    "rr": gdata.Leaf("int", 2)
})

class ServiceMap(ttt.TransformFunction):
    def transform_wrapper(self, cfg, memory, dynstate):
        ll = cfg.get_int("ll")
        rr = cfg.get_int("rr")
        return gdata.Container({
            "left": gdata.Container({
                "a": gdata.Leaf("int", ll)
            }),
            "right": gdata.Container({
                "a": gdata.Leaf("int", rr)
            })
        }), None

actor multi_layer(t: testing.AsyncT):
    stack = ttt.Layer("top",
                ttt.Transform(ServiceMap),
                ttt.Layer("bottom",
                    ttt.Container({
                        "left": ttt.Transform(WriteDev),
                        "right": ttt.Transform(WriteDev)
                    }),
                    ttt.Sink()))

    sess = stack.newsession()

    def cont(_r: value):
        r1 = sess.below().get()
        testing.assertEqual(r1.prsrc(), cfg3.prsrc())
        r2 = sess.below().below().get()
        testing.assertEqual(r2, out3)
        t.success()

    sess.edit_config(cfg4, cont)

########################

cfg5 = gdata.Container({
    "a": gdata.Leaf("int", 1),
})

cfg6 = gdata.Container({
    "a": gdata.Leaf("int", 2),
})

out5 = gdata.Container({
    "b": gdata.Leaf("int", 3),
})


class WriteDevs(ttt.TransformFunction):
    def transform_wrapper(self, cfg: gdata.Node, memory, dynstate):
        return out5, None

actor _test_redundant_config(t: testing.AsyncT):
    stack = ttt.Layer("top",
        ttt.Transform(WriteDevs),
        ttt.Sink())

    sess = stack.newsession()

    def cont(_r: value):
        r = sess.below().get()
        testing.assertEqual(r, out5)
        sess2 = stack.newsession()
        sess2.edit_config(cfg6, cont2)

    def cont2(_r):
        r = sess.below().get()
        testing.assertEqual(r, out5)
        t.success()

    sess.edit_config(cfg5, cont)
