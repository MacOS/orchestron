import testing
import logging

import orchestron.ttx as ttx
#import orchestron.gdata as gdata
import yang.gdata as gdata


y1 = gdata.Container({
    "a": gdata.Leaf("int", 1),
    "l1": gdata.List(["name"], [
        gdata.ListElement(["k1"], {
            "n1": gdata.Leaf("int", 1),
            "n2": gdata.Leaf("int", 2)
        }),
        gdata.ListElement(["k4"], {
            "n4": gdata.Leaf("int", 4)
        })
    ])
})
y1_transp = {
    "a": {
        'src': gdata.Leaf("int", 1)
    },
    "l1": {
        'src': gdata.List(["name"], [
            gdata.ListElement(["k1"], {
                "n1": gdata.Leaf("int", 1),
                "n2": gdata.Leaf("int", 2)
            }),
            gdata.ListElement(["k4"], {
                "n4": gdata.Leaf("int", 4)
            })
        ])
    }
}
y1_transp_l1 = {
    "k1": {
        'src': gdata.ListElement(["k1"], {
            "n1": gdata.Leaf("int", 1),
            "n2": gdata.Leaf("int", 2)
        })
    },
    "k4": {
        'src': gdata.ListElement(["k4"], {
            "n4": gdata.Leaf("int", 4)
        })
    }
}
y1_transp_l1_k1 = {
    "n1": {
        'src': gdata.Leaf("int", 1)
    },
    "n2": {
        'src': gdata.Leaf("int", 2)
    }
}
y2 = gdata.Container({
    "b": gdata.Leaf("int", 2),
    "c": gdata.Leaf("int", 3),
    "l1": gdata.List(["name"], [
        gdata.ListElement(["k1"], {
            "n2": gdata.Leaf("int", 2)
        }),
        gdata.ListElement(["k2"], {
            "n1": gdata.Leaf("int", 1),
            "n3": gdata.Leaf("int", 3)
        })
    ]),
    "d": gdata.LeafList(["a", "b", "c"])
})
merge_y1_y2 = gdata.Container({
    "a": gdata.Leaf("int", 1),
    "b": gdata.Leaf("int", 2),
    "c": gdata.Leaf("int", 3),
    "l1": gdata.List(["name"], [
        gdata.ListElement(["k1"], {
            "n1": gdata.Leaf("int", 1),
            "n2": gdata.Leaf("int", 2)
        }),
        gdata.ListElement(["k2"], {
            "n1": gdata.Leaf("int", 1),
            "n3": gdata.Leaf("int", 3)
        }),
        gdata.ListElement(["k4"], {
            "n4": gdata.Leaf("int", 4)
        })
    ]),
    "d": gdata.LeafList(["a", "b", "c"])
})


########################

def _test_transpose():
    transp0 = ttx.transpose({'src': y1})
    testing.assertEqual(transp0, y1_transp)

    transp1 = ttx.transpose(transp0["l1"])
    testing.assertEqual(transp1, y1_transp_l1)

    transp2 = ttx.transpose(transp1["k1"])
    testing.assertEqual(transp2, y1_transp_l1_k1)

########################

def _test_multi_merge():
    mrg = gdata.merge(y1, y2)
    testing.assertEqual(mrg, merge_y1_y2)

    mrg1 = ttx.merge({'srcA': y1, 'srcB': y2})
    testing.assertEqual(mrg1, merge_y1_y2)

    mrg2: gdata.Node = ttx.merge({'srcB': y2})
    testing.assertEqual(mrg2, y2)

########################

def _test_patch():
    fst = {
        'srcA': y1,
        'srcB': y2
    }
    snd = {
        'srcA': gdata.Container({
            'l1': gdata.Absent()
        }),
        'srcB': gdata.Container({
            "b": gdata.Leaf("int", 0),
            'l1': gdata.List(["name"], [
                gdata.AbsentListElement(["k2"])
            ]),
            'd': gdata.Absent()
        })
    }
    res = ttx.patch(fst, snd)
    exp = {
        'srcA': gdata.Container({
            'a': gdata.Leaf("int", 1)
        }),
        'srcB': gdata.Container({
            "b": gdata.Leaf("int", 0),
            "c": gdata.Leaf("int", 3),
            "l1": gdata.List(["name"], [
                gdata.ListElement(["k1"], {
                    "n2": gdata.Leaf("int", 2)
                })
            ])
        })
    }
    testing.assertEqual(res, exp)

########################

actor basic_commit_tester(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()
    t2 = router.newtrans()
    t3 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        t2.configure("2", {'srcB': y2}, None)

        def cont2(_r: value):
            t2.commit("2", True)
            r = t2.get()
            t3.configure("3", {
                'srcA': gdata.Container({
                    'l1': gdata.Absent()
                }),
                'srcB': gdata.Container({
                    'b': gdata.Absent(),
                    'd': gdata.LeafList(['a','c'])
                })
            }, None)

            def cont3(_r: value):
                t3.commit("3", True)
                r = t3.get()
                expected = gdata.Container({
                    'a': gdata.Leaf("int", 1),
                    'c': gdata.Leaf("int", 3),
                    'l1': gdata.List(['name'], [
                        gdata.ListElement(['k1'], {
                            'n2': gdata.Leaf("int", 2)
                        }),
                        gdata.ListElement(['k2'], {
                            'n1': gdata.Leaf("int", 1),
                            'n3': gdata.Leaf("int", 3)
                        })
                    ]),
                    'd': gdata.LeafList(['a', 'c'])
                })
                testing.assertEqual(r, expected)
                done(True, None)

            t3.lock("3", None, cont3)

        t2.lock("2", None, cont2)

    t1.lock("1", None, cont1)

def _test_basic_commit(done, logger: logging.Handler):
    c = basic_commit_tester(done)

########################

actor overlapping_commit_tester(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)
    t2.configure("2", {'srcB': y2}, None)

    def cont1(_r: value):
        r = t1.get()
        testing.assertEqual(r, gdata.Absent())
        t1.commit("1", True)
        t2.lock("2", None, cont2)

    def cont2(_r: value):
        r = t2.get()
        testing.assertEqual(r, y1)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, merge_y1_y2)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_overlapping_commit(done, logger: logging.Handler):
    c = overlapping_commit_tester(done)

########################

actor modified_commit_tester(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)
    t1.configure("1", {'srcA': y2}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, y2)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_modified_commit(done, logger: logging.Handler):
    c = modified_commit_tester(done)

########################

actor modified_commit_tester2(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)

    def cont1(_r: value):
        t1.configure("1", {'srcA': y2}, None)
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, y2)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_modified_commit2(done, logger: logging.Handler):
    c = modified_commit_tester2(done)

########################

y0 = gdata.Container({
    "a": gdata.Leaf("int", 0),
    "l1": gdata.List(["name"], [
        gdata.ListElement(["k4"], {
            "n4": gdata.Leaf("int", 0)
        })
    ]),
    "d": gdata.LeafList(["a", "b"])
})

actor modified_overlapping_commit_tester(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': y0}, None)
    t2.configure("2", {'srcB': y2}, None)

    def cont1(_r: value):
        t1.configure("1", {'srcA': y1}, None)
        t1.commit("1", True)
        t1.lock("2", None, cont2)

    def cont2(_r: value):
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, merge_y1_y2)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_modified_overlapping_commit(done, logger: logging.Handler):
    c = modified_overlapping_commit_tester(done)

########################

y3 = gdata.Container({
    "b": gdata.Leaf("int", 0),
    "c": gdata.Leaf("int", 0),
})

actor modified_overlapping_commit_tester2(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)
    t2.configure("2", {'srcB': y3}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        t2.lock("2", None, cont2)

    def cont2(_r: value):
        t2.configure("2", {'srcB': y2}, None)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, merge_y1_y2)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_modified_overlapping_commit2(done, logger: logging.Handler):
    c = modified_overlapping_commit_tester2(done)

########################

a0 = gdata.Container({
    'a': gdata.Leaf("int", 0)
})

a1 = gdata.Container({
    'a': gdata.Leaf("int", 1)
})

b1 = gdata.Container({
    'b': gdata.Leaf("int", 1)
})

a0b1 = gdata.Container({
    'a': gdata.Leaf("int", 0),
    'b': gdata.Leaf("int", 1)
})

actor config_failure_tester(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': a0}, None)
    t2.configure("2", {'srcB': a1}, None)

    def cont1(_r: value):
        t1.commit("1", True)

        def cont2(_r: value):
            if isinstance(_r, Exception):
                t2.configure("2", {'srcB': b1}, None)
            t2.commit("2", True)
            r = t2.get()
            testing.assertEqual(r, a0b1)
            done(True, None)

        t2.lock("2", None, cont2)

    t1.lock("1", None, cont1)

def _test_config_failure(done, logger: logging.Handler):
    c = config_failure_tester(done)

########################

actor config_abort_tester(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': a0}, None)
    t2.configure("2", {'srcB': a1}, None)

    def cont1(_r: value):
        t1.commit("1", False)
        t2.lock("2", None, cont2)

    def cont2(_r: value):
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, a1)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_config_abort(done, logger: logging.Handler):
    c = config_abort_tester(done)

########################

actor multi_lock_tester(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)

    def cont1(_r: value):

        def cont2(_r: value):
            t1.configure("1", {'srcA': y2}, None)
            t1.commit("1", True)
            r = t1.get()
            testing.assertEqual(r, y2)
            done(True, None)

        t1.lock("1", None, cont2)

    t1.lock("1", None, cont1)

def _test_multi_lock(done, logger: logging.Handler):
    c = multi_lock_tester(done)

########################

actor empty_lock_tester(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()
    t2 = router.newtrans()

    t2.configure("2", {'srcB': y3}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        t2.lock("2", None, cont2)

    def cont2(_r: value):
        t2.configure("2", {'srcB': y2}, None)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, y2)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_empty_lock(done, logger: logging.Handler):
    c = empty_lock_tester(done)

########################

actor empty_lock_tester2(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()
    t2 = router.newtrans()

    t2.configure("2", {'srcB': y3}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        r2 = t2.get()
        testing.assertEqual(r2, y2)
        r1 = t1.get()
        testing.assertEqual(r1, y2)
        done(True, None)

    def cont2(_r: value):
        t2.configure("2", {'srcB': y2}, None)
        t2.commit("2", True)
        t1.lock("1", None, cont1)

    t2.lock("2", None, cont2)

def _test_empty_lock2(done, logger: logging.Handler):
    c = empty_lock_tester2(done)

########################

actor no_lock_tester(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)
    t2.configure("2", {'srcB': y3}, None)

    def cont2(_r: value):
        t1.commit("1", True)
        t2.configure("2", {'srcB': y2}, None)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, y2)
        done(True, None)

    t2.lock("2", None, cont2)

def _test_no_lock(done, logger: logging.Handler):
    c = no_lock_tester(done)

########################

actor spurious_commit_tester(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)

    def cont1(_r: value):
        t2.commit("2", True)

        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, y1)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_spurious_commit(done, logger: logging.Handler):
    c = spurious_commit_tester(done)

########################

actor spurious_config_tester(done: action(?bool, ?Exception)->None):
    router = ttx.Transform(ttx.PassThrough) ([])
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)
    t2.configure("2", {'srcB': y2}, None)

    def cont1(_r: value):
        t2.configure("2", {'srcB': y3}, None)
        t2.commit("2", True)

        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, y1)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_spurious_config(done, logger: logging.Handler):
    c = spurious_config_tester(done)

########################


actor main(env):
    basic_commit_tester(lambda s,e: env.exit(0))
