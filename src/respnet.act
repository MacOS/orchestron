
import xml
import yang.gdata
import orchestron.trans as otrans
from y_cfs import root as cfs_root
from y_cfs import netinfra__netinfra__routers_entry
from y_cfs import netinfra__netinfra__backbone_link_entry
from y_rfs import root as rfs_root
from y_rfs_loose import root as rfs_root_loose
from y_rfs import nodes__nodes__routers_entry
import ttt

import testing

nb_input = """
<data>
    <netinfra xmlns="http://example.com/netinfra">
        <routers>
            <name>FRA-CORE-1</name>
            <id>1</id>
            <role>core</role>
        </routers>
        <routers>
            <name>STO-CORE-1</name>
            <id>4</id>
            <role>core</role>
        </routers>
        <routers>
            <name>AMS-CORE-1</name>
            <id>8</id>
            <role>edge</role>
        </routers>
        <backbone-link>
            <left-router>AMS-CORE-1</left-router>
            <left-interface>Bundle-Ether1</left-interface>
            <right-router>STO-CORE-1</right-router>
            <right-interface>Bundle-Ether1</right-interface>
        </backbone-link>
        <backbone-link>
            <left-router>FRA-CORE-1</left-router>
            <left-interface>Bundle-Ether1</left-interface>
            <right-router>STO-CORE-1</right-router>
            <right-interface>Bundle-Ether2</right-interface>
        </backbone-link>
        <backbone-link>
            <left-router>AMS-CORE-1</left-router>
            <left-interface>Bundle-Ether2</left-interface>
            <right-router>FRA-CORE-1</right-router>
            <right-interface>Bundle-Ether2</right-interface>
        </backbone-link>
    </netinfra>
    <l3vpn>
    </l3vpn>
</data>
"""

nb_input2 = """
<data>
    <netinfra xmlns="http://example.com/netinfra">
        <routers>
            <name>NYC-CORE-1</name>
            <id>1</id>
            <role>core</role>
        </routers>
        <routers>
            <name>STO-CORE-1</name>
            <id>4</id>
            <role>core</role>
        </routers>
        <routers>
            <name>AMS-CORE-1</name>
            <id>8</id>
            <role>core</role>
        </routers>
    </netinfra>
    <l3vpn>
    </l3vpn>
</data>
"""


class CfsRouter(ttt.TTTTransform):
    # TODO: this should be generated
    def transform_wrapper(self, i: yang.gdata.Node) -> yang.gdata.Node:
        mi = netinfra__netinfra__routers_entry.from_gdata(i)
        return self.cfs_router_transform(mi).to_gdata()

    mut def cfs_router_transform(self, i: netinfra__netinfra__routers_entry) -> rfs_root_loose:
        o = rfs_root_loose()
        print("CFS router transform running", i.name, i.id)
        router = o.nodes.routers.create(i.name)
        router.id = i.id
        sid = i.id
        router.ipv4_address = "10.0.1.%s/32" % sid if sid is not None else ""
        router.ipv6_address = "2001:db8:0:1::%s/128" % sid if sid is not None else ""
        return o

class CfsBBLink(ttt.TTTTransform):
    # TODO: this should be generated
    def transform_wrapper(self, i: yang.gdata.Node) -> yang.gdata.Node:
        mi = netinfra__netinfra__backbone_link_entry.from_gdata(i)
        return self.cfs_bblink_transform(mi).to_gdata()

    mut def cfs_bblink_transform(self, i: netinfra__netinfra__backbone_link_entry) -> rfs_root_loose:
        print("CFS backbonelink transform running %s [%s] <-> %s [%s]" % (i.left_router, i.left_interface, i.right_router, i.right_interface))
        o = rfs_root_loose()

        left_r = o.nodes.routers.create(i.left_router)
        li = left_r.backbone_interface.create(i.left_interface)
        li.remote.device = i.right_router
        li.remote.interface = i.right_interface

        right_r = o.nodes.routers.create(i.right_router)
        ri = right_r.backbone_interface.create(i.right_interface)
        ri.remote.device = i.left_router
        ri.remote.interface = i.left_interface

        return o



class RfsRouter(ttt.TTTTransform):
    def transform_wrapper(self, i: yang.gdata.Node) -> yang.gdata.Node:
        mi = nodes__nodes__routers_entry.from_gdata(i)
        return self.rfs_router_transform(mi).to_gdata()

    mut def rfs_router_transform(self, i: nodes__nodes__routers_entry) -> rfs_root:
        #sto_dev = y_dev.IosXr24()
        print("RFS /nodes/routers transform running", i.name, i.id)
        print("  IPv4 address:", i.ipv4_address)
        print("  IPv6 address:", i.ipv6_address)
        for bbi in i.backbone_interface.elements:
            print("  Backbone interface: %s [%s] <-> %s [%s]" % (i.name, bbi.name, bbi.remote.device, bbi.remote.interface))
        o = rfs_root()
        return o

#    return {
#        "configs": {
#            "STO-CORE-1": sto_dev
#        }
#    }

#mut def blarfs_router_transform(i: nodes__nodes__routers_entry) -> dict[str, yang.adata.MNode]
#    o = rfs_root()
#    sto_dev = y_dev.Junos24()
#    print("RFS /nodes/routers transform running", i.name, i.id)
#    print("  IPv4 address:", i.ipv4address)
#    print("  IPv6 address:", i.ipv6address)
#    return {"STO-CORE-1": sto_dev}
#
#def transform1():
#    return dev_tree.junos["STO-CORE-1"]
#
#def transform2():
#    return dev_tree.xr["STO-CORE-1"]

actor main(env):
    root = ttt.TTTContainer({
        "netinfra": ttt.TTTContainer({
            "routers": ttt.TTTList(CfsRouter),
            "backbone-link": ttt.TTTList(CfsBBLink),
        })
    })

    l2_root = ttt.TTTContainer({
        "nodes": ttt.TTTContainer({
            "routers": ttt.TTTList(RfsRouter)
        })
    })

    def conf(nb_in):
        input_config = cfs_root.from_xml(xml.decode(nb_in))
        config_per_source = {"source1": input_config.to_gdata()}
        return config_per_source

    l1_output = {}
    root.configure(conf(nb_input), l1_output)
    l2_output = {}
    l2_root.configure(l1_output, l2_output)
    env.exit(0)

#actor main(env):
#    layers = appttt.get_layers()
#
#    l1_root = layers[0]
#    l2_root = layers[1]
#
#    def conf(nb_in):
#        input_config = cfs_root.from_xml(xml.decode(nb_in))
#        config_per_source = {"source1": input_config.to_gdata()}
#        return config_per_source
#
#    l1_output = {}
#    l1_root.configure(conf(nb_input), l1_output)
##    l2_output = {}
##    l2_root.configure(l1_output, l2_output)
#    env.exit(0)
