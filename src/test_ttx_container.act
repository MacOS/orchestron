import testing
import logging

import orchestron.ttx as ttx
#import orchestron.gdata as gdata
import yang.gdata as gdata


tree1 = gdata.Container({
    'left': gdata.Container({
        "l1": gdata.List(["name"], [
            gdata.ListElement(["k1"], {
                "n1": gdata.Leaf("int", 1),
                "n2": gdata.Leaf("int", 2)
            }),
            gdata.ListElement(["k4"], {
                "n4": gdata.Leaf("int", 4)
            })
        ])
    }),
    'right': gdata.Container({
        "a": gdata.LeafList([1,2,3])
    })
})

tree2 = gdata.Container({
    'left': gdata.Container({
        "l1": gdata.List(["name"], [
            gdata.ListElement(["k1"], {
                "n2": gdata.Leaf("int", 2)
            }),
            gdata.ListElement(["k2"], {
                "n1": gdata.Leaf("int", 1),
                "n3": gdata.Leaf("int", 3)
            })
        ]),
    }),
    'right': gdata.Container({
        "b": gdata.Leaf("int", 1)
    })
})

merge_1_2 = gdata.Container({
    'left': gdata.Container({
        "l1": gdata.List(["name"], [
            gdata.ListElement(["k1"], {
                "n1": gdata.Leaf("int", 1),
                "n2": gdata.Leaf("int", 2)
            }),
            gdata.ListElement(["k2"], {
                "n1": gdata.Leaf("int", 1),
                "n3": gdata.Leaf("int", 3)
            }),
            gdata.ListElement(["k4"], {
                "n4": gdata.Leaf("int", 4)
            })
        ]),
    }),
    'right': gdata.Container({
        "a": gdata.LeafList([1,2,3]),
        "b": gdata.Leaf("int", 1)
    })
})

class Identity(ttx.TransformFunction):
    def transform_wrapper(self, cfg):
        return cfg


########################

actor basic_commit_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, out)

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, tree1)
        done(True, None)

    t1.lock("1", out, cont1)

def _test_basic_commit(done, logger: logging.Handler):
    c = basic_commit_tester(done)

########################

actor overlapping_commit_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, out)
    t2.configure("2", {'srcB': tree2}, out)

    def cont1(_r: value):
        t2.lock("2", out, cont2)
        t1.commit("1", True)

    def cont2(_r: value):
        r1 = t1.get()
        testing.assertEqual(r1, tree1)
        t2.commit("2", True)
        r2 = t2.get()
        testing.assertEqual(r2, merge_1_2)
        r1 = t1.get()
        testing.assertEqual(r1, r2)
        done(True, None)

    t1.lock("1", out, cont1)

def _test_overlapping_commit(done, logger: logging.Handler):
    c = overlapping_commit_tester(done)

########################

actor overlapping_commit_tester2(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, out)
    t2.configure("2", {'srcB': tree2}, out)

    def cont2(_r: value):
        t2.commit("2", True)
        t1.lock("1", out, cont1)

    def cont1(_r: value):
        r2 = t2.get()
        testing.assertEqual(r2, tree2)
        t1.commit("1", True)
        r1 = t1.get()
        testing.assertEqual(r1, merge_1_2)
        r2 = t2.get()
        testing.assertEqual(r1, r2)
        done(True, None)

    t2.lock("2", out, cont2)

def _test_overlapping_commit2(done, logger: logging.Handler):
    c = overlapping_commit_tester2(done)

########################

actor modified_commit_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, out)
    t1.configure("1", {'srcA': tree2}, out)

    def cont1(_r: value):
        t1.commit("1", True)
        r1 = t1.get()
        testing.assertEqual(r1, tree2)
        done(True, None)

    t1.lock("1", out, cont1)

def _test_modified_commit(done, logger: logging.Handler):
    c = modified_commit_tester(done)

########################

actor modified_commit_tester2(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, out)

    def cont1(_r: value):
        t1.configure("1", {'srcA': tree2}, out)
        t1.commit("1", True)
        r1 = t1.get()
        testing.assertEqual(r1, tree2)
        done(True, None)

    t1.lock("1", out, cont1)

def _test_modified_commit2(done, logger: logging.Handler):
    c = modified_commit_tester2(done)

########################

tree0 = gdata.Container({
    'left': gdata.Container({
        "l1": gdata.List(["name"], [
            gdata.ListElement(["k4"], {
                "n4": gdata.Leaf("int", 0)
            })
        ]),
    }),
    'right': gdata.Container({
        "a": gdata.LeafList([1,2,3])
    })
})

actor modified_overlapping_commit_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': tree0}, out)
    t2.configure("2", {'srcB': tree2}, out)

    def cont1(_r: value):
        t2.lock("2", out, cont2)
        t1.configure("1", {'srcA': tree1}, out)
        t1.commit("1", True)

    def cont2(_r: value):
        t2.commit("2", True)
        r2 = t2.get()
        testing.assertEqual(r2, merge_1_2)
        done(True, None)

    t1.lock("1", out, cont1)

def _test_modified_overlapping_commit(done, logger: logging.Handler):
    c = modified_overlapping_commit_tester(done)

########################

a0 = gdata.Container({
    'left': gdata.Container({
        'a': gdata.Leaf("int", 0)
    }),
    'right': gdata.Container({
        'x': gdata.Leaf("int", 0)
    })
})

a1 = gdata.Container({
    'left': gdata.Container({
        'a': gdata.Leaf("int", 1)
    })
})

b1 = gdata.Container({
    'left': gdata.Container({
        'b': gdata.Leaf("int", 1)
    })
})

a0b1 = gdata.Container({
    'left': gdata.Container({
        'a': gdata.Leaf("int", 0),
        'b': gdata.Leaf("int", 1)
    }),
    'right': gdata.Container({
        'x': gdata.Leaf("int", 0)
    })
})

actor config_failure_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': a0}, out)
    t2.configure("2", {'srcB': a1}, out)

    def cont1(_r: value):
        t1.commit("1", True)

        def cont2(_r: value):
            if isinstance(_r, Exception):
                t2.configure("2", {'srcB': b1}, out)
            t2.commit("2", True)
            r = t2.get()
            testing.assertEqual(r, a0b1)
            done(True, None)

        t2.lock("2", out, cont2)

    t1.lock("1", out, cont1)

def _test_config_failure(done, logger: logging.Handler):
    c = config_failure_tester(done)

########################

actor config_abort_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': a0}, out)
    t2.configure("2", {'srcB': a1}, out)

    def cont2(_r: value):
        t1.lock("1", out, cont1)
        t2.commit("2", False)

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r.prsrc(), a0.prsrc())
        done(True, None)

    t2.lock("2", out, cont2)

def _test_config_abort(done, logger: logging.Handler):
    c = config_abort_tester(done)

########################

actor multi_lock_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, out)

    def cont1(_r: value):

        def cont2(_r: value):
            t1.configure("1", {'srcA': tree2}, out)
            t1.commit("1", True)
            r = t1.get()
            testing.assertEqual(r, tree2)
            done(True, None)

        t1.lock("1", out, cont2)

    t1.lock("1", out, cont1)

def _test_multi_lock(done, logger: logging.Handler):
    c = multi_lock_tester(done)

########################

tree3 = gdata.Container({
    'left': gdata.Container({
        "l1": gdata.List(["name"], []),
    }),
    'right': gdata.Container({
        "b": gdata.Leaf("int", 0)
    })
})

actor empty_lock_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()
    t2 = container.newtrans()

    t2.configure("2", {'srcB': tree3}, out)

    def cont1(_r: value):
        t1.commit("1", True)
        t2.lock("2", out, cont2)

    def cont2(_r: value):
        t2.configure("2", {'srcB': tree2}, out)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, tree2)
        done(True, None)

    t1.lock("1", out, cont1)

def _test_empty_lock(done, logger: logging.Handler):
    c = empty_lock_tester(done)

########################

actor empty_lock_tester2(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()
    t2 = container.newtrans()

    t2.configure("2", {'srcB': tree3}, out)

    def cont1(_r: value):
        t1.commit("1", True)    # Note: MAY happen before t2.commit!
        r2 = t2.get()
        testing.assertEqual(r2, tree2)
        r1 = t1.get()
        testing.assertEqual(r1, tree2)
        done(True, None)

    def cont2(_r: value):
        t2.configure("2", {'srcB': tree2}, out)
        t2.commit("2", True)
        t1.lock("1", out, cont1)

    t2.lock("2", out, cont2)

def _test_empty_lock2(done, logger: logging.Handler):
    c = empty_lock_tester2(done)

########################

actor no_lock_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, out)
    t2.configure("2", {'srcB': tree3}, out)

    def cont2(_r: value):
        t1.commit("1", True)
        t2.configure("2", {'srcB': tree2}, out)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, tree2)
        done(True, None)

    t2.lock("2", out, cont2)

def _test_no_lock(done, logger: logging.Handler):
    c = no_lock_tester(done)

########################

actor spurious_commit_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, out)

    def cont1(_r: value):
        t2.commit("2", True)

        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, tree1)
        done(True, None)

    t1.lock("1", out, cont1)

def _test_spurious_commit(done, logger: logging.Handler):
    c = spurious_commit_tester(done)

########################

actor spurious_config_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Sink()
    out = devices.newsession()
    container = ttx.Container({
        'left': ttx.Transform(Identity),
        'right': ttx.Transform(Identity)
    }) ()
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, out)
    t2.configure("2", {'srcB': tree2}, out)

    def cont1(_r: value):
        t2.configure("2", {'srcB': tree3}, out)
        t2.commit("2", True)

        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, tree1)
        done(True, None)

    t1.lock("1", out, cont1)

def _test_spurious_config(done, logger: logging.Handler):
    c = spurious_config_tester(done)

########################

actor main(env):
    spurious_commit_tester(lambda s,e: env.exit(0))
