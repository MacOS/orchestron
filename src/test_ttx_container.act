import testing
import logging

import orchestron.ttx as ttx
#import orchestron.gdata as gdata
import yang.gdata as gdata


l1 = gdata.Container({
    "a": gdata.Leaf("int", 1),
    "l1": gdata.List(["name"], [
        gdata.ListElement(["k1"], {
            "n1": gdata.Leaf("int", 1),
            "n2": gdata.Leaf("int", 2)
        }),
        gdata.ListElement(["k4"], {
            "n4": gdata.Leaf("int", 4)
        })
    ])
})
tree1 = gdata.Container({
    'left': l1,
    'right': gdata.Container({
        "b": gdata.LeafList([1,2,3])
    })
})


########################

actor basic_commit_tester(done: action(?bool, ?Exception)->None):
    devices = ttx.Devices()
    out = devices.newsession()
    router_l = ttx.Transform(lambda cfg: cfg)()
    router_r = ttx.Transform(lambda cfg: cfg)()
    container = ttx.Container({
        'left': router_l,
        'right': router_r
    })
    t1 = container.newtrans()
    

    t1.configure("1", {'srcA': tree1}, out)

    def cont1(r1: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, tree1)
        done(True, None)

    t1.apply("1", out, cont1)

def _test_basic_commit(done, logger: logging.Handler):
    c = basic_commit_tester(done)

########################


actor main(env):
    basic_commit_tester(lambda s,e: env.exit(0))
